{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome <code>Timelink</code>on going documentation project.</p> <p><code>Timelink</code> is a software system for micro-historical research with a strong emphasis on network analysis and prosopography.</p> <p><code>Timelink</code> provides a data models and procedures to go from historical sources to network analysis, convering the transcription of sources, record linking, reconstitution of biographies and network inference.</p> <p><code>Timelink</code> is unique in that it bridges a\u00a0source-oriented\u00a0approach with a\u00a0person-oriented\u00a0approach.</p> <p>Start with what_is_timelink for a brief introduction on the type of what type of research <code>Timelink</code> was designed for and how it addresses the main issues in data processing of historical information about people.</p> <p>The  provides a step by step guide on how to transcribe your first historical information and process the information it contains in various ways.</p> <p>This documentation is available in source form at:  https://github.com/time-link/<code>Timelink</code>-docs.git</p>"},{"location":"getting_started/","title":"Getting started","text":"<p>TBD</p>"},{"location":"admin/launching_web_app/","title":"Launching the web interface","text":"<pre><code>timelink start\n</code></pre> <p>Will launch the <code>timelink</code>webapp from the current directory</p>"},{"location":"admin/timelink_cli/","title":"Timelink command line tool","text":"<p>Type in a terminal window</p> <pre><code>timelink --help\n</code></pre> <p>If you get and error, then <code>timelink</code> is not properly installed</p> <p>Check: installing_timelink</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"developer/config_timelink_settings/","title":"Config timelink settings","text":""},{"location":"developer/config_timelink_settings/#configuring-timelink","title":"Configuring <code>timelink</code>","text":"<p><code>timelink</code> uses <code>Pydantic-settings</code> to manage package and application settings. See https://docs.pydantic.dev/latest/concepts/pydantic_settings/</p> <p>This allows to manage effortlessly default values, <code>.env</code>  files and environment variables.</p> <p>The class <code>WebAppSettings</code> in  <code>timelink/app/backend/webapp_settings.py</code> defines default values for <code>Timelink</code> web application.</p> <p>In code the default values can be overridden when creating an instance:</p> <p>settings = WebAppSettings(timelink_admin_pwd=\"xpto\", time_user_db_type=\"postgres\")</p> <p>Or values can be read from a <code>.env</code> file:</p> <pre><code> settings = WebAppSettings(_envfile='.)\n</code></pre> <ul> <li>See https://docs.pydantic.dev/latest/concepts/pydantic_settings/#dotenv-env-support</li> </ul> <p>Or from arguments in the command line.</p> <ul> <li>See https://docs.pydantic.dev/latest/concepts/pydantic_settings/#command-line-support</li> </ul>"},{"location":"developer/development_environment/","title":"Development environment","text":""},{"location":"developer/development_environment/#important-links","title":"Important links","text":"<ul> <li>Code repository: <ul> <li>https://github.com/time-link/timelink-py</li> <li>Instructions for contributors: https://github.com/time-link/timelink-py/blob/main/## </li> </ul> </li> <li>Pypi package:<ul> <li>https://pypi.org/project/timelink/0.2.8/</li> </ul> </li> <li>ReadTheDocs (package and source code documentation)<ul> <li>https://timelink-py.readthedocs.io/</li> <li>The documentation is produced by <code>make docs</code> </li> </ul> </li> </ul>"},{"location":"developer/development_environment/#source-directory-layout","title":"Source directory layout","text":""},{"location":"developer/development_environment/#project-directory-layout-timelink-py","title":"Project Directory Layout: <code>timelink-py</code>","text":"<p>The Timelink package used as a template the <code>cookiecutter-pypackage</code>. Check the documentation at https://github.com/audreyfeldroy/cookiecutter-pypackage on how to install various tools used. </p> <p>[!NOTE] Old version of <code>cookiecutter-pypackage</code>  The template used at the time of project start has been checked, namely usage of Travis seems to have been replaced by github actions in the most current versions.</p> <p>The root directory contains standard Python project files, with the main code in <code>timelink/</code> and tests in <code>tests/</code>. Below is a high-level overview of the key directories and files based on the project's structure.</p>"},{"location":"developer/development_environment/#root-directory-timelink-py","title":"Root Directory (<code>timelink-py/</code>)","text":"<ul> <li><code>timelink/</code>: source code for the <code>timelink</code> package.</li> <li><code>tests/</code>: Directory for unit and integration tests (e.g., <code>test_*.py</code> files like <code>test_020_database.py</code>).<ul> <li>This directory contain a <code>timelink-home</code> directory that is used to have a base for testing file reflita operations, web services, notebook integration, etc... Inside there are reference projects containing <code>Kleio</code>  sources and example notebooks. Also a tutorial.</li> </ul> </li> <li><code>requirements.txt</code>: Lists Python dependencies for the project, i.e. necessary to run <code>timelink</code>.</li> <li><code>requirements_dev.txt</code> Lists Python dependencies for running the various development tools, e.g., tests, linting, documentation generation, etc...</li> <li><code>tox.ini</code>: Configuration for Tox, a tool for running local tests and linting in isolated Python environments (e.g., for Python 3.10/3.11 and Flake8).  Run is used by <code>make test-all</code>.</li> <li><code>.travis.yml</code> Configuration file for the Tavis continuous integration service. This file is used to configure the deployment of a new version of<code>timelink</code> to Pypi and ReadTheDocs, when a \"push\" is done in the main branch of the github repository.  It defines the installation of requirements and the version of Python against which the tests will be run. If tests are successful the package is build and deployed to PyPi.  In future github CI will be used and this file deprecated. See the \"Testing\" heading in </li> <li><code>setup.cfg</code>: configuration for version number generation (<code>bump2version</code> ), packaging and <code>flake8</code> linter. </li> <li><code>pyproject.toml</code>: Configuration for <code>Black</code> code formatter, <code>poetry</code> (current not used) and <code>pylance</code> </li> <li><code>.gitignore</code>: Specifies files and directories to ignore in Git (e.g., <code>__pycache__/</code>, <code>*.sqlite</code>, virtual environments).</li> <li><code>README.md</code>, <code>LICENSE</code>, etc.: Documentation and licensing files.</li> </ul>"},{"location":"developer/development_environment/#main-package-directory-timelink","title":"Main Package Directory (<code>timelink/</code>)","text":"<ul> <li><code>cli.py</code>: Command-line interface using Typer, for commands like database setup and server management.</li> <li><code>api/</code>: Core API modules, including models (e.g., <code>entity.py</code>, <code>database.py</code>), schemas, and CRUD operations.</li> <li><code>web/</code>: Web application components, including pages (e.g., <code>display_id_page.py</code>, <code>tables_page.py</code>) and utilities for the NiceGUI-based web interface.</li> <li><code>networks/</code>: Modules for network analysis (e.g., <code>network_generation.py</code>).</li> <li><code>kleio/</code>: Kleio server integration and utilities (e.g., <code>kleio_server.py</code>).</li> <li><code>app/</code>: Application-specific code, including models (e.g., <code>project.py</code>) and templates (e.g., Jinja2 templates in <code>templates/</code>).</li> <li><code>mhk/</code>: MHK (historical data) utilities.</li> <li><code>migrations/</code>: Database migration scripts.</li> <li><code>__init__.py</code>: Package initialization.</li> </ul>"},{"location":"developer/development_environment/#linting-and-code-formatting","title":"Linting and code formatting","text":"<p>Linting is the process of analysing source code to flag potential errors. In <code>VSCode</code> linting signals visually problematic lines and changes the color of the filename in the file browser to red.</p> <p>We used <code>Fake8</code> for linting, so it should be enable inthe workspace settings. Currently we do not use <code>pylint</code> so it should be disabled in workspace settings to avoid spurious warnings and errors.</p> <p>Code can be formatted to abide to <code>Flake8</code> requirements using <code>Black</code> .  Code can be formatted using <code>black timelink</code> in the terminal or in VSCode by setting the default formatter to \"Black formatter\".</p> <p>These are set in Workspace settings in the project.</p>"},{"location":"developer/exporting_and_importing_identifications/","title":"Exporting and importing identifications","text":"<p>The result of \"record linking\" or \"Entity Resolution\" can be exported in <code>kleio</code> format. This was a feature of the <code>MHK</code> system. </p> <p>Here is how an exported file looks like:</p> <pre><code>kleio$gacto2.str/authorities/Generated from database toliveira_china by user toliveira, file date: +2021-06-18 Timestamp:2021-06-18T02:43:33.674Z/translations=13\n\n   identifications$real-entities-toliveira/Real entities, including real persons and real objects/dbase=toliveira_china/user=toliveira/date=20210618/mode=backup\n\n      rperson$rp-46/Agostinho de Barros/m/status=N\n\n         occ$deh-joao-de-barros-ref1/id=rp-46-occ\n\n         occ$deh-agostinho-de-barros/id=rp-46-occ2\n</code></pre> <p>The  <code>str</code> definition for <code>identifications</code> is:</p> <pre><code>note ===========================================================\nnote doc group authority-register a register of authority-records\nnote    authority records are used to identify people, objects\nnote    and to normalize vocabularies and other authority information.\nnote    authority-registers must have an unique id, but a given community\nnote    can have as many authority-registers as needed\nnote\n\npart name=authority-register;\n    position=id,name;\n    guaranteed=id,name,date,user,dbase;\n    also=date,user,dbase;\n    part=authority-record\n\nnote ===========================================================\nnote identifications: a authority-register for identifications\nnote doc group identifications \n     Identifications are authority-registers for record linking.\n     They contain real-entity records (people or objects) that aggregate\n     occurrences in the source pertaining to the same person or entity.\n     To keep imported records separate from local ones use a different user.\npart name=identifications;\n    source=authority-register;\n    position=id,name;\n    guaranteed=id,name,date,user,dbase,mode;\n    also=obs;\n    part=rentity,rperson,robject\n\nnote ===========================================================\nnote rentity: a authority-record for a real entity\nnote doc group rentity\n        Rentity contains information about a real entity.\n        Defines the standart name for the entity and what are the occurences,\n        in `occ` subgroups.\npart name=rentity;\n     position=id,description,type;\n     guaranteed=id,description,type;\n     also=status,user,obs;\n     part=occ\n\nnote ===========================================================\nnote rperson: a authority-record for a real person\nnote doc group rperson contains information about a real person.\nnote     Defines the standart name for the person, the sex, and what are the occurrences\nnote    Note that real entities can have attributes and relations\npart name=rperson;\n     position=id,sname,sex;\n     guaranteed=id,sname,sex;\n     also=status,user,obs;\n     part=occ,ls,atr,rel\n\nnote ===========================================================\nnote robject: a authority-record for a real object\nnote doc group robject contains information about a real object.\nnote     Defines the standart name for the object, the type, and what are the occurrences\nnote    Note that real entities can have attributes and relations\npart name=robject;\n     position=id,sname,type;\n     guaranteed=id,sname,type;\n     also=status,user,obs;\n     part=occ,ls,atr,rel\n\nnote ===========================================================\nnote occ: an occurrence of a real entity\nnote doc group occ contains the ids of the occurrences of a real entity\nnote     Defines the id of the occ and optionally the name of the occurence\nnote     the id_act of the act where it occurs, the type of act and the fucntion\nnote     note that these optional information are just for documentation because they\nnote    derive automatically from the occurrence id.\npart name=occ;\n     position=occurrence,atype,func,date,name;\n     guaranteed=occurrence;\n     also=name,atype,func,date,id,obs\n</code></pre>"},{"location":"developer/sql_alchemy_models/","title":"SQLAlchemy models and views","text":"<p><code>timelink</code> uses <code>SQLAlchemy</code> to access the database.</p> <p>To </p>"},{"location":"existing_source_schemes/Chronologies/","title":"Chronologies","text":""},{"location":"existing_source_schemes/Chronologies/#purpose","title":"Purpose","text":"<p>Chronologies are similar to events. </p> <p>They describe that something took place at a given date in a given location. </p>"},{"location":"existing_source_schemes/Chronologies/#elements","title":"Elements","text":"<p>The main elements of cronologies are date, loc (for location), and description.</p> <p>Optionally they can have an obs element that can store long texts.</p> <p>The sequence is:</p> <pre><code>    crono$DATE/LOC/DESCRIPTION/obs=OBS\n</code></pre> <p>The loc element is used to record the scope of the chronology. </p> <p>In the example bellow,taken from Dehergne, R\u00e9pertoire des J\u00e9suites de Chine...,  loc is used to record either \"En Chine\" or \"Hors de Chine\", (\"China\" or \"Fora da China\" in the Portuguese version)</p> <p>Note that dates can take the extended date notation except for the after and before (\"&gt;\", \"&lt;\") characters.</p> <p>Dates with dashes for legibility and ranges separated by \":\" are acceptable.</p>"},{"location":"existing_source_schemes/Chronologies/#enclosed-groups","title":"Enclosed groups","text":"<p>They can include people, places and topics.</p>"},{"location":"existing_source_schemes/Chronologies/#example","title":"Example","text":"<p>Example (using portuguese group names):</p> <pre><code>kleio$\n    fonte$deh-crono/tipo=cronologia/data=1552:1758\n\n        crono$1522-01-28/China/Kia-Tsing imperador\n            referido$Jiajing%Kia-Tsing# @wikidata:Q10011\n\n        crono$1542:1543/Fora da China/Chegada dos Portugueses a Jap\u00e3o \n                    (e, em 1549, chegada de S. Francisco Xavier)\n            referido$Francisco Xavier/xmesmo_que=francisco-xavier\n            lugar$Jap\u00e3o\n\n        crono$1563/Fora da China/Fim do Conc\u00edlio de Trento\n            topico$Conc\u00edlio de Trento\n</code></pre>"},{"location":"existing_source_schemes/Chronologies/#schema","title":"Schema","text":"<p>The base group for chronologies is <code>cevent</code> , representing a chronology event. </p> <p>A <code>crono</code> synonym is defined for legibility in Portuguese sources</p> <pre><code>note ============================================\nnote doc group cevento Chronology event,\nnote           can be used inside source\nnote TODO: change to cevent source event, check mappings\npart name=cevento; source=evento;\n    position=data,loc,description;\n    guaranteed=data,loc,description;\n    also=id,obs, same_as, xsame_as;\n    part=person,topic,place\n\npart name=topic; source=abstraction;\n    position=name,description;\n    guaranteed=name;\n    also=obs,id\n\npart name=place; source=geoentity\n\nnote doc group crono Synonym for cevento\n\npart name=crono; source=cevento;\n    part=referido,referida,lugar,topico\n\npart name=topico; source=topic\n\npart name=lugar; source=place\n</code></pre>"},{"location":"introduction/","title":"Index","text":"<ul> <li>what_is_timelink</li> <li>installing_timelink</li> <li>basic_concepts</li> <li>about_kleio_notation</li> <li>timelink_database</li> <li>timelink_with_vscode</li> </ul>"},{"location":"introduction/basic_concepts/","title":"Basic concepts","text":"<p>In this section we introduce the basic concepts related to how historical information is modeled in <code>Timelink</code>.</p>"},{"location":"introduction/basic_concepts/#from-sources-to-databases-the-dual-model","title":"From Sources to Databases: the dual model","text":"<p><code>Timelink</code> uses a dual model to represent historical information.</p> <ul> <li>A text-based source-oriented data model is used to transcribe sources with little loss of information.</li> <li>A person-oriented model, based on a relational database, that consolidates biographical data, handles inference of networks and reversible record linking</li> </ul> <p>The <code>Kleio</code> notation (Manfred Thaller) is used for source-oriented data input.</p> <p>A <code>relational database model</code>  is used to store person-oriented data while keeping the original source context.</p> <p>A special software, the Kleio translator processes text transcriptions of the sources in <code>kleio</code> notation and generates <code>data</code>  for the the person-oriented database.</p> <p>This solves the inevitable tension between a source-oriented model and an analytical model.</p>"},{"location":"introduction/basic_concepts/#the-source-oriented-model","title":"The Source Oriented Model","text":"<p>The <code>source oriented model</code> defines a set of concepts for the transcription of information in historical sources that describe people and objects, their individual attributes and relations. It also provides the concept of <code>event</code> or <code>act</code> to represent information about something that happened in a moment in time.</p> <p>The source model uses a containment structure of <code>source-&gt;act-&gt;persons</code> and <code>objects</code>. The source oriented model uses a number of key terms in a formal way: <code>source</code>, <code>act</code>, <code>person</code>, <code>object</code>, <code>function</code>, <code>attribute</code> and <code>relation</code>.</p> <ul> <li>A historical <code>source</code> contains one or more <code>acts</code>.</li> <li>An <code>act</code> is a record of events, as they are described in the sources (a baptism, a marriage, a sale contact, a rental contract, ...)</li> <li>An <code>act</code> contains actors (<code>persons</code>) and <code>objects</code> (things, properties, institutions, ...).</li> <li><code>persons</code> and <code>objects</code> appear in <code>acts</code> with specific <code>functions</code> (father in a baptism, owner in a sale contract, house in a rental contract).</li> <li><code>Actors</code> and <code>objects</code> are described by <code>attributes</code> (name, age, gender, price, area, ...).</li> <li><code>Actors</code> and <code>objects</code> are linked by <code>relations</code>. Relations are described by a type (kin, economical, professional), and a value (brother, lender, apprentice).</li> <li>Every <code>act</code>, <code>function</code>, <code>attribute</code> and <code>relation</code> has a date and a link to the point in the original source where it was recorded.</li> </ul> <p>Example of the Kleio notation</p> <p>A baptism:</p> <pre><code>kleio$\n source$baptisms-1685\n    baptism$17/9/1685/parish church\n        n$manuel/m\n            father$jose luis\n                attr$residence/casal da corujeira\n            mother$domingas jorge\n\n        gfather$francisco rodrigues/id=b1685.9.17.gf\n            attr$residence/moinhos do paleao\n        gmother$maria pereira\n            rel$kin/wife/francisco rodrigues/b1685.9.17.gf\n</code></pre> <p>This example shows an <code>act</code> (a baptism) that contains five <code>persons</code>: child (\"n\"), father, mother, god father and god mother. Two of the people, the father and the god father have the <code>atribute</code> residence, and the god mother has a kin <code>relation</code> with the god father.</p>"},{"location":"introduction/basic_concepts/#the-person-oriented-model","title":"The Person Oriented Model","text":"<p>The  <code>Person Oriented Model</code> aggregates the information collected from the sources and provides a people or object centered view where fragments of information in different sources are aggregated in biographies. </p> <p>The <code>Person Oriented Model</code> is an alternative view on the information recorded in the sources, in a way that facilitates statistical analysis, network analysis and prosopographies.</p> <p>A biography is represented through 3 domains: - Functions (the roles of the person in acts) - Attributes - Relations</p> <p>The previous baptism generates information as follows (italics show information inferred by <code>Timelink</code>).</p>"},{"location":"introduction/basic_concepts/#entities","title":"Entities","text":"Id Class Inside bapt1685-1700 source --- b1 act bapt1685-1700 b1-per1 person b1 b1685.9.17.gf person b1 b1-per2 person b1 b1-per3 person b1 <p>Note that each entity has an unique identifier: <code>id</code>. Such identifier is necessary to refer unambiguously to a <code>person</code>, <code>object</code>, <code>act</code> or <code>source</code>.</p> <p>Most <code>ids</code> are generated automatically by the Kleio translator when processing the source transcripts.but in some circunstances they need to be explicitly given, when a link between two entities needs to be recorded in an non ambiguous way, such asthe relation between godmother and godfather in the example above.</p>"},{"location":"introduction/basic_concepts/#persons","title":"Persons","text":"Id Name Gender b1-per1 manuel f b1-per2 jose luis m b1-per3 domingas jorge f b1985.9.17.gf francisco rodrigues m b1.per5 maria pereira f <p>Objects The <code>Person oriented model</code> also handles entities that existed and are not persons, such as physical objects, buildings, spaces (land properties), and also \"abstract\" or \"intangible\" objects such as institutions. </p> <p>Attributes</p> Entity Type Value Date b1-per1i residence Casal da Corujeira 17/9/1685 b1985.9.17.gf residence Moinhos do Paleao 17/9/1685 <p>Relations</p> Origin Destination Type Value Date b1-per2 b1.per3 kin husband 17/9/1685 b1-per5 b1985.9.17.gf kin wife 17/9/1685 b1-per2 b1-per1 kin father 17/9/1685 <p>Functions</p> <p>Functions of people (father,mother, ...) in acts are a special case of relations linking people to acts, with the type 'function-in-act'. The same applies to objects, when they appear in acts.</p> Origin Destination Type Value Date b1985.9.17.gf b1 function-in-act gfather 17/9/1685 b1.per5 b1 function-in-act gmother 17/9/1685"},{"location":"introduction/basic_concepts/#how-the-translation-between-models-works","title":"How the translation between models works","text":"<p><code>Timelink</code> contains a set of basic entities: sources, acts, persons, objects, attributes and relations. For an example such as the previous one to work, <code>Timelink</code> needs to know the correspondence between the <code>kleio</code> notation and the relational database tables, as well as how to infer values like gender and kin relations.</p>"},{"location":"introduction/basic_concepts/#terminology-note","title":"Terminology note","text":"<p>When describing both the Source Oriented Model and the Person Oriented Model different terms are used to describe concepts that are similar. </p> <p>In both the Source Oriented Model (SOM) and the Person Oriented Model (POM), we have concepts for entities that existed, such as sources, transcriptions of acts, people, and objects. </p> <p>These entities have attributes that provide information about them, such as names, dates, and archival locations.</p> <p>Additionally, both models include the concept of relations, which describe the connections between entities. For example, in the relations, we can specify that person X is the father of person Y or that person Z bought property W.</p> <p>Each model was conceived in different contexts: the source oriented model was part of Manfred Thaller work in historical databases, while the person oriented model is based on the Entity-Relationship model that is at the base of modern relational database systems. In consequence, each model uses different terms to refer to the same things. For instance in the <code>Kleio</code>notation \"groups\" are used to record \"entities\", and \"elements\" to record their \"attributes\".</p> <p>In the context of a database, entities such as persons, objects, acts, and sources are represented as rows in different database tables. Each table column corresponds to an attribute of entities of the same type, storing information such as names, dates, and other relevant data.</p> <p>At a higher level, when describing the structure of information, we will use the terminology defined by the  Entity-Relationship-Model</p> <ul> <li>Entity: something that existed in the real world: sources, acts, people, also \"abstractions\" like institutions and events like baptisms or marriages.</li> <li>Relation: relations between entities like kinship relations between people, ownership relations between people and properties, roles of people participating in acts.</li> <li>Attribute: items of information that describe entities and relations (names, dates, kinship terms, prices of transactions)</li> <li>Entity-class or entity-type: a category of Entities described by the same attributes <code>person</code> is a entity class, <code>building</code> is another entity class and so is <code>acts</code>; each is described by different attributes.</li> <li>Entity instance: a specific entity of a specific class (the person named Galileo Galillei, the building named 'Tower of Pisa', the baptism that occurred in 8/7/1685 in the church of Soure, Portugal )</li> </ul> <p>We refer to the concepts above to introduce the terminology specific to the SOM and POM models.</p>"},{"location":"introduction/basic_concepts/#concepts-and-terms-associated-with-the-source-model","title":"Concepts and terms associated with the Source model","text":""},{"location":"introduction/basic_concepts/#groups-elements-and-aspects","title":"Groups, elements and aspects","text":"<p>For the SOM the main terms are Group,Element and Aspect used by Manfred Thaller in the Kleio notation.</p> <ul> <li>Group: corresponds to entities.</li> <li>Element: corresponds to attributes.</li> <li>Aspect: represents extra information about attributes (no direct correspondence in the <code>entity-relatioship</code>. The Kleio notation allows to register not only the core value of an attribute but also a comment and the original wording in the document.</li> </ul>"},{"location":"introduction/basic_concepts/#groups-for-attributes-and-relations","title":"Groups for attributes and relations","text":"<p>In Timelink Kleio groups are used also to record attributes of entities that vary with time, like residence or profession.  </p> <p>These attributes have not just a value (\"Abbey Road\", \"Musician\") but also have associated a date. So they have their own attributes (dates for one), like entities.</p> <p>In the SOM model Kleio groups are also used to record relations. Relation groups also have their own atributes, such as origin and destination of the relation, type and value and date.</p> <p>In the ER Model this type of information is called a \"weak entity\": they have their own attributes like entities, but they do not correspond to something that exists on its own in the real world, they depend on a main entity.</p> <p>In the POM we use the terminology of databases: tables and columns.</p> <ul> <li>Table: corresponds to entities</li> <li>Columns: corresponds to attributes</li> </ul> <p>In the Person Oriented Model tables are also used to represent relationships between entities and time varying attributes.</p>"},{"location":"introduction/basic_concepts/#mapping-kleio-groups-to-database-tables","title":"Mapping Kleio Groups to Database tables","text":""},{"location":"introduction/basic_concepts/#source-for-person-oriented-generic-mapping","title":"Source for person oriented generic mapping","text":"<p>The correspondence between a ER Model description and the tables and columns of a database is well defined. For a given information model described in terms of ER Model a set of tables and columns in a relational database can be produced deterministically (see the reference above for details and further references).</p> <p>The correspondence between the Kleio Groups, Elements and Aspects and tables and columns in a relational database is defined by conventions and configuration files in Timelink.</p> <p>Basic correspondence is provided by Timelink for basic entity types like sources, acts, people, objects. This allows Timelink to process generic Kleio transcriptions into generic tables as demonstrated in the example of the baptism above.</p>"},{"location":"introduction/basic_concepts/#defining-mappings-for-specific-sources","title":"Defining mappings for specific sources","text":"<p>In most cases a transcription closer to the source is desired, either because of readability (we rather read baptism$ than act$ and father$ than person$) or because the source describes entities with specific attributes (for instance a land property being sold is an <code>object</code> which has special attributes such as area and a typology like rural/urban).</p> <p>To be able to use Kleio to record in a format closer to the source we need to provide Timelink the following information:</p> <ul> <li>the name of the groups to be used and their relation with the core groups</li> <li>e.g. <code>father</code> and <code>mother</code> instead of <code>person</code> or <code>land</code> instead of<code>object</code></li> <li>the extra elements, if any, that the groups will include</li> <li>if extra elements are introduced how they will be stored in database tables</li> <li>if there is information to be inferred from the transcription (attributes or relations), what are the rules to be used for inference<ul> <li>e.g. the element <code>sex</code> can be inferred if groups such as <code>father</code> and <code>mother</code> are used instead of <code>person</code></li> </ul> </li> </ul> <p>Currently three types of configuration files are used to provide this information:</p> <ul> <li>Schema (aka structure) files define new groups and their relation with core groups, as well as extra elements that the new groups might include.</li> <li>mappings files describe how information of the new groups and elements is stored in the database tables.</li> <li>inference files contain rules for inference of attributes and relations from the groups in the transcriptions.</li> </ul>"},{"location":"introduction/installing_timelink/","title":"Installing <code>timelink</code>","text":"<pre><code>pip install timelink-py\n</code></pre> <p>to update</p> <pre><code>pip -U timelink-py\n</code></pre>"},{"location":"introduction/timelink_database/","title":"About <code>timelink</code>  databases","text":""},{"location":"introduction/timelink_with_vscode/","title":"Timelink and <code>VSCode</code>","text":"<p><code>Timelink</code> integrates well with Microsoft VSCode.</p> <p>You can use VSCode to edit Kleio source files, and analise data with Jupyter Notebooks, all from within VSCode. For the you need to install the <code>timelink</code> VSCode extension.</p> <ul> <li> Provide link and instructions</li> </ul>"},{"location":"introduction/timelink_with_vscode/#steps","title":"Steps","text":"<ol> <li>Install VSCode.<ol> <li>install time-link vscode extension</li> <li>install sqllite extension</li> </ol> </li> <li>Install GitHub Desktop</li> <li>It is recommended that you create a free account with Github desktop.</li> <li>clone the tutorial project</li> <li>Open the tutorial project in VSCode.</li> <li>Open the 0.vscode-setup.ipynb</li> <li>Run the first cell. VSCode will ask you to install the required packages, confirm.</li> </ol>"},{"location":"introduction/what_is_timelink/","title":"What is Timelink","text":"<p>Timelink is a computer tool specially developed to support micro-historical research, centred on people, their attributes, functions and relations. Timelink has strong emphasis on network analysis and prosopography.</p> <p>Timelink provides data models and processes to go from historical sources to network analysis, covering the transcription of sources, record linking, reconstitution of biographies and network inference.</p> <p>Timelink is unique in that it bridges a source-oriented approach with a person-oriented approach. This document provides a quick overview of Timelink.</p>"},{"location":"introduction/what_is_timelink/#the-problem","title":"The problem","text":"<p>How to reconstruct individual biographies from diverse historical sources and from those biographies infer networks of relations between people?</p> <p>Requirements:</p> <ul> <li>Few apriori choices on who is relevant.</li> <li>Focus is on network analysis: relations between people are as important as individual attributes.</li> <li>Great diversity of sources (anything with personal information can be used).</li> <li>Linking references to the same persons (or other type of entities) in different sources is essential (record linking, aka entity resolution).</li> </ul>"},{"location":"introduction/what_is_timelink/#aims","title":"Aims","text":""},{"location":"introduction/what_is_timelink/#data-input-close-to-the-original-source","title":"Data input close to the original source","text":"<p>Information about persons should keep the original context, so that at latter stages of research each item of information is traceable to the original source.</p> <p>Original source structure and sequence of information should be preserved so that a clear representation of the original sources is possible at any moment.</p> <p>Decisions implying loss of information should be postponed, requiring an expressive and efficient method of data entry.</p>"},{"location":"introduction/what_is_timelink/#late-and-reversible-record-linking","title":"Late and reversible record linking","text":"<p>Decision on who is who should be made when all available information is available.</p> <p>Record linking should be reversible (mistakes happen).</p>"},{"location":"introduction/what_is_timelink/#flexible-interface-for-complex-information","title":"Flexible interface for complex information","text":"<p>Find ways to show the complex information of biographies and networks in a comprehensible way.</p> <p>Next: basic_concepts</p>"},{"location":"reference/identification_lists/","title":"Identification lists","text":""},{"location":"reference/identification_lists/#kleio-notation-for-real-entities","title":"Kleio notation for real entities","text":"<p>From version 2019 A3 <code>Timelink/MHK</code> has the ability to export current linking information in <code>kleio</code> format. This allows backup and exchange of record linking information between users and databases.</p> <p>Although the export files are in <code>Kleio</code> format they are not \"sources\" and keep the clear distinction in <code>Timelink</code> between the information gathered from historical sources and inferences and \"interpretations\" produced by the historians.</p> <p>This is done by introducing the concept of authority-register at the same level as historical source</p> <p>Gacto definitions:</p> <pre><code>part name=kleio;\nalso=structure,translator,autorels,obs,prefix,translations;\nposition=structure,translator,obs;\npart=historical-source,fonte,authority-register, identifications\n\nnote ===========================================================\n\nnote doc group authority-register a register of authority-records\n\nnote authority records are used to identify people, objects\n\nnote and to normalize vocabularies and other authority information.\n\nnote authority-registers must have an unique id, but a given community\n\nnote can have as many authority-registers as needed\n\nnote\n\n\n\npart name=authority-register;\n\nposition=id,name;\n\nguaranteed=id,name,date,user,dbase;\n\nalso=date,user,dbase;\n\npart=authority-record\n\n\n\nnote ===========================================================\n\nnote identifications: a authority-register for identifications\n\nnote doc group identifications are authority-registers for record linking.\n\nnote They contain real-entity records (people or objects) that aggregate\n\nnote occurrences in the source pertaining to the same person or entity.\n\nnote To keep imported records separate from local ones use a different user.\n\npart name=identifications;\n\nsource=authority-register;\n\nposition=id,name;\n\nguaranteed=id,name,date,user,dbase;\n\nalso=date,user,dbase,replace_mode,ignore_date,obs;\n\npart=rentity,rperson,robject\n</code></pre> <p>Example of an identification file generated internally.</p> <pre><code>kleio$gacto2.str/translator=authorities/obs=Generated from database testes by user testes, file date: +2020-07-02 Timestamp:2020-07-02T11:23:01.581Z\n\n\n\nidentifications$real-entities/Real Entities, including real persons and real objects\n\n/dbase=testes\n\n/user=testes\n\n/date=20200702\n\n/mode=backup\n\n\n\nrperson$rp-59/afonso goncalvez/m/\n\nocc$c1568.03-per3\n\nocc$c1569.07-per2\n</code></pre>"},{"location":"reference/identification_lists/#identification-files","title":"Identification files","text":"<p>Identification files store information about real entities, normally persons, but can also be other types of entities, like objects.</p> <p>These files pose a problem, because MHK provides interactive ways to identify entities directly on the database. So, unlike source files, it is possible to add information to real entities, namely new occurrences directly on the database. A file representing real entities may easily get out of date regarding the information in the database.</p> <p>On the other hand it is good to have a proper record of real entities outside the database, for three types of situations:</p> <ol> <li> <p>backup purposes, so that in case of a crash of the database the real entity information can be restored. Note that source files are normally stored on Git so this would also provide version control on real entity decisions.</p> </li> <li> <p>sharing of identifications between users and databases. For instance data collectors working on new sources on a copy of the main database can get updated information on real persons from the project coordinator.</p> </li> <li> <p>Synchronising a public server with a local database: git can be used to keep a server synchronised with a local database, if not only source information but also identifications are shared in git commits.</p> </li> </ol>"},{"location":"reference/identification_lists/#identification-files-and-permissions","title":"Identification files and permissions","text":"<p>Use cases and permissions</p> <ul> <li> <p>in order to fully restore the identifications exported one user must have administrative permissions to change the real persons of all the other users. This means keeping the real ids and users of the original real entities.</p> </li> <li> <p>Other users should only be allowed to import their own real identities. This means importing real entities associate them with their user id, so they became their own real entities. But users are not allowed to import as their own real entities with id that exist in the database associated to other persons.  </p> </li> </ul>"},{"location":"reference/identification_lists/#generating-identification-files","title":"Generating identification files","text":"<p>Identification files are generated by MHK in the \"Identification\" section of the interface, in export.</p>"},{"location":"reference/identification_lists/#rules-on-importing-identification-files","title":"Rules on importing Identification files","text":"<p>The mode element of the identifications group determines how the file is processed.</p> <pre><code>identifications$real-entities/Real Entities, including real persons and real objects\n\n/dbase=testes\n\n/user=testes\n\n/date=20200702\n\n/mode=backup\n</code></pre> <p>Rule 1: files with mode=backup are processed but the content is ignored except if mhk.import.authority.backup=yes </p> <p>The content of a file with mode=backup on the identifications group is skipped on import, since it is considered to be a backup of existing real entities. Note that the file is \"processed\" and a report is produced</p> <p>To import the content of the file either change the mode to \"restore\" or add the following property to an existing user with level 3 permissions:  </p> <p><code>mhk.import.authority.backup=yes</code> </p> <p>or</p> <p><code>timelink.import.authority.backup=yes</code> </p> <p>Related properties</p> <p><code>mhk.import.auto=yes (auto import)</code> <code>timelink.import.auto=yes (auto import)</code></p> <p>Having both mhk.import.authority.backup=yes and mhk.import.auto=yes makes MHK to automatically update the database and current identifications, and is a way to keep a server synchronised with a reference database.</p> <p>Rule 2: Non admin Users can only import files where the user element correspond to the current (\"importing\") user.</p> <pre><code>identifications$real-entities/Real Entities, including real persons and real objects\n/dbase=testes\n/user=testes\n/date=20200702\n/mode=backup\n</code></pre> <p>A file can only be imported by a user with the same id as the user stated in the user element of the identifications group. However, the user that corresponds to the admin of the database can import identification files from other users. The real entities imported by an admin on behalf of other users will be stored in the space associated with the file user.</p> <p>Any user can import identifications from another user by changing the value of the \"user\" element in the file so that it matches its own id.</p> <p>Rule 3: Except for the current admin user, users cannot overwrite on import real entities that are associated with another user</p> <p>Real entities Ids are generated sequentially across the database, so it is very much possible that when exchanging identification files there is an overlap of incoming ids with existing ids.</p> <p>To avoid replacing ids of a user with those of another upon import, the system generates an error when importing a real entity which already exists in the database associated with a different user.</p> <p>Current if the importing user is admin and the imported real entity belongs to an user in the database different from the onde of the importing file, then the imported real entity replaces the existing one.</p> <p>Example:</p> <ul> <li> <p>Admin imports identification file with user=ilhavo that contains a real person id rp-101</p> </li> <li> <p>In existing database rp-101 exists associated with user people</p> </li> <li> <p>result: rp-101 is replaced with the information in the identification file and is associated with user ilhavo</p> </li> </ul> <p>In the future it would be better to implement a mhk.import.authority.rentities.id.conflict=mode with mode being:</p> <ul> <li> <p>Keep-incoming (current behaviour)</p> </li> <li> <p>Rename-existing (change id of existing real entitty, e.g. rp-101 becomes rp-101-people</p> </li> <li> <p>Throw-error (don't change notify error).</p> </li> </ul>"},{"location":"reference/identification_lists/#non-covered-use-case","title":"Non covered use-case","text":"<p>Public replica data set with several users that do their own identifications. They do not export. Main admin regularly updates identifications of reference database and pushes to git. On update user identification are replaced by new ones coming from admin.</p> <p>Solutions:</p> <ul> <li> <p>Real entities ids are suffixed with user name, or a predefined suffix in property mhk.use.rid.suffix. In this incoming identifications from admin never conflict with local users</p> </li> <li> <p>On import from the admin identifications , in case of conflict, the existing user rids receive an updated rid, with the prefix. So original rids are maintained except when a conflict occurs.</p> </li> </ul>"},{"location":"reference/kleio_file_structure/","title":"Structure of a Kleio File","text":""},{"location":"reference/kleio_file_structure/#file-names-and-extensions","title":"File names and extensions","text":""},{"location":"reference/kleio_file_structure/#file-names","title":"File names","text":"<p>It is recomended that the file name of a Kleio file is the same of the id of the source group that it contains.</p>"},{"location":"reference/kleio_file_structure/#extension","title":"Extension","text":"<p>Files can have extension \"cli\" or \"kleio\".</p>"},{"location":"reference/kleio_file_structure/#the-top-level-kleiogroup","title":"The top level <code>Kleio</code>group","text":"<pre><code>part name=kleio;    \n    also=structure,translator,autorels,obs,prefix,translations;\n    position=structure,translator,obs; \n    part=historical-source,fonte,authority-register,\n                identifications, link, property\n</code></pre>"},{"location":"reference/kleio_file_structure/#special-sub-groups-link-and-property","title":"Special sub groups: link and property","text":"<pre><code>note ===========================================================\nnote doc group link\nnote Declare a linked data target\npart name=link;\n    position=shortname,urlpattern;\n    also=id,obs\n\nnote ===========================================================\nnote doc group property\n      A property of the file for the kleio parser.\n      Properties are not stored in the database.\n      They affect the parsing of the file.\n\n      Examples:\n\n      property$multiple-entry-flag/124#ascii for pipe char\n\npart name=property;\n    position=name,value;\n    also=id,obs\n</code></pre>"},{"location":"reference/kleio_notation_reference/","title":"Kleio notation reference","text":"<p>TBD</p>"},{"location":"reference/kleio_schema_files_location/","title":"Location of source schema files","text":"<p>The Kleio server has a builtin generic schema / structure file.</p> <p>Individual projects can define their own schema and save them where <code>timelink</code> will find them.</p> <p>The standard source repository has a <code>sources</code> directory at the same level of a <code>structures</code> directory.</p> <p>See timelink_home</p>"},{"location":"reference/kleio_schema_files_location/#files-in-the-structures-directory","title":"Files in the <code>structures</code> directory","text":"<p>For a given source file to be translated with path <code>sources/SUBPATH/file.cli</code> the default stru would be, in order:</p> <ul> <li><code>structures/SUBPATH/file.str</code></li> <li><code>structures/SUBPATH2/gacto2.str</code>      where <code>SUBPATH2</code> is a parent path of SUBPATH</li> <li><code>structures/DIRNAME.str</code>  where DIRNAME, is the name of a dir in SUBPATH</li> <li><code>structures/gacto2.str</code> can be replaced by <code>sources.str</code>  for clarity in all patterns.</li> </ul> <p>This allows for a source repository to have formats specific to a single file, a sub directory of files or to all the sources in the repository:</p> <ul> <li><code>structures/baptisms/baptism-index.str</code> format specific for <code>sources/baptisms/baptism-index.cli</code></li> <li><code>structures/baptisms/gacto2.str</code> or <code>structures/baptisms/sources.str</code> for all sources inside <code>sources/baptisms</code> and sub directories</li> <li><code>structures/baptisms.str</code>  for all sources in <code>sources/baptisms</code> (not sure about this one, the advantage is to manage more easily different structure files with different names)</li> <li><code>structures/gacto2.str</code> or <code>structures/sources.str</code> default str for all sources.</li> </ul> <p>See source code for this at file apiTranslations.pl</p>"},{"location":"reference/kleio_source_model_diagram/","title":"Kleio source model diagram","text":"<p>The data model is based on the concept that a historical source contains information on a sequence of nested entities. </p> <p>Although there is an infinite variety of historical sources, here we focus on those that contain information about people and objects, or abstractions (like institutions or ideas) and events in which those people participate. </p> <p>Typical case is parish registers or notarial records. In those cases the source is a written registration of an event.</p> <pre><code>---\ntitle: Timelink ontology Source Model\n---\nclassDiagram\n    Kleio *-- Source: contained in\n    Source *-- Act: contained in\n    Source *-- Event: contained in\n    Act *-- Person: function in\n    Act *-- Object:  in\n    Endurant *-- Attribute: dated attribute of\n    Endurant *-- Relation: date relation of\n    Endurant &lt;|-- Person: is type of\n    Endurant &lt;|-- Object: is type of\n    Perdurant &lt;|-- Act: is type of\n    Perdurant &lt;|-- Event: is type of\n    Perdurant &lt;|-- Attribute: is type of\n    Perdurant &lt;|-- Relation: is type of\n\n    class Source{\n        +str id\n        +str description\n        +date date}\n    class Act{\n        +str id\n        +date date\n        +str loc\n        +str ref}\n    class Endurant{\n        +str id}\n    class Person{\n        +str name\n        +char sex\n        +str obs\n        +same_as(person_id)}\n    class Object{\n        +str description\n        +str type\n        +str obs\n        +same_as(object_id)\n\n    }\n    class Attribute{\n        +str id\n        +str type\n        +str value\n        +date date\n        +str obs\n    }\n    class Relation{\n        +str id\n        +str type\n        +str value\n        +date date\n        +str date\n        +str origin()\n    }\n    Person &lt;|-- Male_actor\n    Person &lt;|-- Female_actor\n    Person &lt;|-- Neutral_actor\n    class Male_actor{\n        -str sex(m)\n    }\n    class Female_actor{\n        -str sex(f)\n    }\n    Male_actor &lt;|-- PT_Male_actor\n    Male_actor &lt;|-- EN_Male_actor\n\n\n</code></pre>"},{"location":"reference/linked_data_providers/","title":"Linked data providers","text":"<p>Linked data providers are external sites to which timelink can link.</p> <p>Linking to external involves two steps.</p>"},{"location":"reference/linked_data_providers/#1-define-linked-data-patterns","title":"1. Define linked data patterns","text":"<p>Linked data patterns are declared in each kleio file, bellow the initial <code>kleio$</code> group.</p> <pre><code>kleio$\n    link$wikidata/\"https://www.wikidata.org/wiki/$1\"\n</code></pre> <p>The <code>link$</code> group associates a shortcut <code>wikidata</code> with a URL pattern:  <code>https://www.wikidata.org/wiki/$1</code></p>"},{"location":"reference/linked_data_providers/#2-anotate-sources-with-linked-data-shortcuts","title":"2. Anotate sources with linked data shortcuts","text":"<p>In source transcriptions specific linked data is registered by including in comments sequences such as <code>@wikidata:Q919362</code>. </p>"},{"location":"reference/linked_data_providers/#21-links-in-attribute-values","title":"2.1 Links in attribute values","text":"<p>Linked data annotations in attribute values will generate an additional attribute with the url of the linked data. This is useful for normalization of attribute values, like place names.</p>"},{"location":"reference/linked_data_providers/#example-annotating-place-names-with-wikidata-items","title":"Example: annotating place names with wikidata items","text":"<pre><code>n$Ant\u00f3nio de Abreu/id=deh-antonio-de-abreu\n    ls$jesuita-entrada/Goa, \u00cdndia# @wikidata:Q1171/15791200\n    ls$jesuita-votos-local/Negapattinam, \u00cdndia%Negapatami (N\u00e9gapatam)# @wikidata:Q695585/16040106\n    ls$morte/Changchow, China#no rio, a caminho do Jap\u00e3o @wikidata:Q57970/16110000\n</code></pre> <p>This generated extra attributes with the full URL</p> <pre><code>n$Ant\u00f3nio de Abreu/m/id=deh-antonio-de-abreu\n  ls$jesuita-entrada@wikidata/\"https://www.wikidata.org/wiki/Q1171\"%Goa, \u00cdndia/15791200\n  ls$jesuita-entrada/Goa, \u00cdndia#@wikidata:Q1171/15791200\n  ls$jesuita-votos-local@wikidata/\"https://www.wikidata.org/wiki/Q695585\"%Negapattinam, \u00cdndia/16040106\n  ls$jesuita-votos-local/Negapattinam, \u00cdndia#@wikidata:Q695585%Negapatami (N\u00e9gapatam)/16040106\n  ls$morte@wikidata/\"https://www.wikidata.org/wiki/Q57970\"%Changchow, China/16110000\n  ls$morte/Changchow, China#no rio, a caminho do Jap\u00e3o @wikidata:Q57970/16110000\n</code></pre> <p>Additional behaviour can be provided through plug-ins, such as fetching linked data properties (TBD).</p>"},{"location":"reference/linked_data_providers/#useful-linked-data-links","title":"Useful linked data links","text":""},{"location":"reference/linked_data_providers/#timelink-mhk-legacy-sites","title":"Timelink (MHK) legacy sites","text":"<pre><code>link$uc-china/\"https://timelink.uc.pt/mhk/china/id/$1\"\n</code></pre>"},{"location":"reference/linked_data_providers/#wikidata","title":"Wikidata","text":"<pre><code>link$wikidata/\"https://www.wikidata.org/wiki/$1\"\n</code></pre>"},{"location":"reference/linked_data_providers/#geonames","title":"Geonames","text":"<pre><code>link$geonames/\"https://www.geonames.org/$1\"\n</code></pre>"},{"location":"reference/linked_data_providers/#portuguese-national-library","title":"Portuguese National Library","text":""},{"location":"reference/linked_data_providers/#biblioteca-nacional-digital","title":"Biblioteca Nacional Digital","text":"<pre><code>link$bnpd/\"https://purl.pt/$1\"/obs=\"Biblioteca Nacional de Portugal - Digital\"\n</code></pre>"},{"location":"reference/linked_data_providers/#biblioteca-nacional-bibliographic-record","title":"Biblioteca Nacional bibliographic record","text":"<pre><code>link$bnp/\"http://id.bnportugal.gov.pt/bib/catbnp/$1\"/obs=\"Biblioteca Nacional de Portugal\n</code></pre> <p>To obtain the id check in a record display  click on \"Link persistente do registo\" </p> <p>You will get something like: http://id.bnportugal.gov.pt/bib/catbnp/245305</p> <p>245305 is the id to use and the annotation in a source would be <code>@bnp:245305</code> </p>"},{"location":"reference/linked_data_providers/#portuguese-online-archives-system-digiarq","title":"Portuguese online archives system (digiarq)","text":""},{"location":"reference/linked_data_providers/#arquivo-distrital-de-viseu","title":"Arquivo distrital de Viseu","text":"<pre><code>link$digiarq.advis/\"https://digitarq.advis.arquivos.pt/details?id=$1\"\n</code></pre>"},{"location":"reference/linked_data_providers/#familias-macaenses","title":"Fam\u00edlias Macaenses","text":"<p>Jorge Forjaz,\u00a0Fam\u00edlias Macaenses 2nd ed.</p> <p>Best way to get a single id link is to use the lineage page associated to a person:</p> <pre><code>link$forjaz/\"https://www.macaneselibrary.org/pub/portuguese/i-p.htm?g=3&amp;p=#$1\"\n</code></pre> <p>Example:</p> <pre><code>https://www.macaneselibrary.org/pub/portuguese/g1/p1592.htm#i39799 click \"Lineage/Linhagem\"\nto obtain:\nhttps://www.macaneselibrary.org/pub/portuguese/i-p.htm?g=3&amp;p=39799 \nand use for annotation\n\n@forjaz:39799\n</code></pre>"},{"location":"reference/location_of%20schema_files/","title":"Location of schema files","text":"<p>The Kleio server has a builtin generic schema / structure file. Individual projects can define their own schema.</p> <p>The standard source repository has a <code>sources</code> directory at the same level of a <code>structures</code> directory.</p>"},{"location":"reference/location_of%20schema_files/#files-in-the-structures-directory","title":"Files in the <code>structures</code> directory","text":"<p>For a given source file to be translated with path <code>sources/SUBPATH/file.cli</code> the default stru would be, in order:</p> <ul> <li><code>structures/SUBPATH/file.str</code> </li> <li><code>structures/SUBPATH2/gacto2.str</code>      where <code>SUBPATH2</code> is a parent path of SUBPATH</li> <li><code>structures/DIRNAME.str</code>  where DIRNAME, is the name of a dir in SUBPATH</li> <li><code>structures/gacto2.str</code> can be replaced by <code>sources.str</code>  for clarity in all patterns.</li> </ul> <p>This allows for a source repository to have formats specific to a single file, a sub directory of files or to all the sources in the repository:</p> <ul> <li><code>structures/baptisms/baptism-index.str</code> format specific for <code>sources/baptisms/baptism-index.cli</code> </li> <li><code>structures/baptisms/gacto2.str</code> or <code>structures/baptisms/sources.str</code> for all sources inside <code>sources/baptisms</code> and sub directories</li> <li><code>structures/baptisms.str</code>  for all sources in <code>sources/baptisms</code> (not sure about this one, the advantage is to manage more easily different structure files with different names)</li> <li><code>structures/gacto2.str</code> or <code>structures/sources.str</code> default str for all sources.</li> </ul> <p>See source code for this at file apiTranslations.pl</p>"},{"location":"reference/processing_new_versions_of_source_transcriptions/","title":"Processing new versions of source transcriptions","text":""},{"location":"reference/processing_new_versions_of_source_transcriptions/#how-to-keep-text-sources-and-databases-in-sync","title":"How to keep text sources and databases in sync","text":"<p>One of the challenges of the data model of Timelink is to ensure that successive versions of the same  source are imported without compromising the integrity of the database.</p> <p>This is difficult because relations between entities need to be preserved. Since historical entities do not have, usually, attributes that can be used as unique identifiers, every entity in the database needs to get an unique id so that it can be referred to as the data collection progresses.</p> <p>Changes related to entities that require some type of unique ids are:</p> <ol> <li>Relations between entities such as those recorded with \"relation\" groups, which can be changed in successive versions of the source, as reading improves, errors are corrected or conventions for \"type\" and \"value\" of relations are refined. Note that many relations between entities are generated automatically by the translator.</li> <li>Signaling that two entities in different points of the source, or in different sources, are the same, through \"same_as\" or \"xsame_as\" elements.</li> <li>Changes in the elements of the entities, like names, or comments and original wording registered with \"#\" and \"%\".</li> <li>Changes in time attributes registered with \"ls\" or \"attr\" .</li> <li>Changes in the order of the entities in the source.</li> <li>Addition of new entities to the source, possibly in the middle of already imported entities.</li> <li>Removal of entities from the source, after they were already imported in the database.</li> </ol> <p>Successive versions of a given source transcription must allow for these changes seamlessly, without the risk of loosing information or making changes in the wrong places.</p> <p>The only way to ensure that the changes are done without errors is to attribute an unique id to each entity as it enters the database and register that id back to the original source transcription so that next time the source is imported the entity is matched with its previous context.</p> <p>The alternative is to require the user to assign an unique id to each entity in the source during transcription, which would slow down the process enourmously and would be difficult, in terms of ensuring uniqueness.</p> <p>The solution is to allow the user to transcribe the source without needing to provide an unique id to each entity. Unique ids must be provided by the user only for sources, certain types of acts and a few types of entities. For most of the content of historical sources, mainly people and objects, explicit ids are required only when the person or the object must be referred to unambiguosly in a relation group, or a \"same as\"  element, further in the source. All the entities registered without explicit ids receive an explicit id during translation and a copy of the source is generated with the explicit ids appended to each entity.</p> <p>For each new version of a source, the previous information in the database is  erased and replaced with the new information.</p> <p>The process is the following:</p> <ol> <li>During translation the kleio translator generates an unique id for each entity that does not have an user defined id. User defined ids are normally registered with \"/id=xxxx\" .</li> <li>The translation generates a new version of the kleio file with the ids explicitly registered with \"/id=\" tags. More information on the process of generating the unique ids bellow.</li> <li>The source is then imported in the database with  all the ids explicit.</li> <li>The user then continues working in the file with the explicit ids, adding information to existing entities, changing  their elements, deleting and adding entities at will in any position in the file where it is allowed by the structure format. Again, the user might provide or not unique ids to the added information. If the user moves entities already imported to other places in the source file and keeps the id (either explicitly or automatically generated), then the association to the same entity in the database is preserved.</li> <li>The next translation will generate unique ids for those new entities that need them, because they are new and the user did not provide an explicit id.</li> <li>On the second and subsequent imports the existing source in the database and all its contained entities are erased and replaced by the new ones. Those entities that were previously in the database return to the database with the same ids, so inter source relations like identifications are preserved.</li> </ol>"},{"location":"reference/processing_new_versions_of_source_transcriptions/#keeping-cross-references-between-sources","title":"keeping cross references between sources.","text":""},{"location":"reference/processing_new_versions_of_sources/","title":"Processing new versions of sources","text":""},{"location":"reference/processing_new_versions_of_sources/#how-to-keep-text-sources-and-databases-in-sync","title":"How to keep text sources and databases in sync","text":"<p>One of the challenges of the data model of Timelink is to ensure that successive versions of the same  source are imported without compromising the integrity of the database.</p> <p>This is difficult because relations between entities need to be preserved. Since historical entities do not have, usually, attributes that can be used as unique identifiers, every entity in the database needs to get an unique id so that it can be referred to as the data collection progresses.</p> <p>Changes related to entities that require some type of unique ids are:</p> <ol> <li>Relations between entities such as those recorded with \"relation\" groups, which can be changed in successive versions of the source, as reading improves, errors are corrected or conventions for \"type\" and \"value\" of relations are refined. Note that many relations between entities are generated automatically by the translator.</li> <li>Signaling that two entities in different points of the source, or in different sources, are the same, through \"same_as\" or \"xsame_as\" elements.</li> <li>Changes in the elements of the entities, like names, or comments and original wording registered with \"#\" and \"%\".</li> <li>Changes in time attributes registered with \"ls\" or \"attr\" .</li> <li>Changes in the order of the entities in the source.</li> <li>Addition of new entities to the source, possibly in the middle of already imported entities.</li> <li>Removal of entities from the source, after they were already imported in the database.</li> </ol> <p>Successive versions of a given source transcription must allow for these changes seamlessly, without the risk of loosing information or making changes in the wrong places.</p> <p>The only way to ensure that the changes are done without errors is to attribute an unique id to each entity as it enters the database and register that id back to the original source transcription so that next time the source is imported the entity is matched with its previous context.</p> <p>The alternative is to require the user to assign an unique id to each entity in the source during transcription, which would slow down the process enourmously and would be difficult, in terms of ensuring uniqueness.</p> <p>The solution is to allow the user to transcribe the source without needing to provide an unique id to each entity. Unique ids must be provided by the user only for sources, certain types of acts and a few types of entities. For most of the content of historical sources, mainly people and objects, explicit ids are required only when the person or the object must be referred to unambiguosly in a relation group, or a \"same as\"  element, further in the source. All the entities registered without explicit ids receive an explicit id during translation and a copy of the source is generated with the explicit ids appended to each entity.</p> <p>For each new version of a source, the previous information in the database is  erased and replaced with the new information.</p> <p>The process is the following:</p> <ol> <li>During translation the kleio translator generates an unique id for each entity that does not have an user defined id. User defined ids are normally registered with \"/id=xxxx\" .</li> <li>The translation generates a new version of the kleio file with the ids explicitly registered with \"/id=\" tags. More information on the process of generating the unique ids bellow.</li> <li>The source is then imported in the database with  all the ids explicit.</li> <li>The user then continues working in the file with the explicit ids, adding information to existing entities, changing  their elements, deleting and adding entities at will in any position in the file where it is allowed by the structure format. Again, the user might provide or not unique ids to the added information. If the user moves entities already imported to other places in the source file and keeps the id (either explicitly or automatically generated), then the association to the same entity in the database is preserved.</li> <li>The next translation will generate unique ids for those new entities that need them, because they are new and the user did not provide an explicit id.</li> <li>On the second and subsequent imports the existing source in the database and all its contained entities are erased and replaced by the new ones. Those entities that were previously in the database return to the database with the same ids, so inter source relations like identifications are preserved.</li> </ol>"},{"location":"reference/processing_new_versions_of_sources/#keeping-cross-references-between-sources","title":"keeping cross references between sources.","text":""},{"location":"reference/source_db_mapping_syntax/","title":"Source db mapping syntax","text":"<p>[!NOTE] Deprecated Currently being refactored to use YAML. See [[Mapping syntax - YAML]] </p> <p>Currently mappings between source groups and database tables are defined with a notation based on <code>prolog</code> clauses with special operators.</p> <p>Here is an example of a mapping, in the current notation:</p> <pre><code>mapping person to class person.\nclass person super entity table persons\n    with attributes\n\n        id column id baseclass id coltype varchar colsize 64 colprecision 0 pkey 1\n\nand\n\n        name column name baseclass name coltype varchar colsize 128 colprecision 0 pkey 0\n\nand\n\n    sex column sex baseclass sex coltype char colsize 1 colprecision 0 pkey 0\n\nand\n\n    obs column obs baseclass obs coltype varchar colsize 16654 colprecision 0 pkey 0 .\n</code></pre> <p>The statement:<code>mapping person to class person</code> means that the Kleio group <code>person</code> will be stored in the database as an entity of class <code>person</code>.</p> <p>The statement: <code>class person super entity table persons</code> means that database entity class <code>person</code> is a specialization of <code>entity</code>, and is stored in a table named <code>persons</code>.</p> <p>The subsequent lines after <code>with attributes</code> specify the mapping between the database entity attributes, store as columns in tables and group elements.</p> <p>For each attribute the following is specified:</p> <ul> <li>id : name of the attribute in the database entity class</li> <li>column id: name of the column in the database for this element</li> <li>baseclass id: the kleio reference class for this attribute</li> <li>coltype, colsize, colprecision: information used to create the column in the database precision only applies if coltype is \"DECIMAL\"</li> <li>pkey: integer,if this attribute is part of the primary key of the table, this is the order</li> </ul> <p>The <code>baseclass</code> refers to certain attribute names that have special meaning .</p> <p>For instance,day,month,year,id,obs, same_as are names of elements that have special meaning in the translation of sources and mapping of data into the database.</p>"},{"location":"reference/source_db_mapping_syntax/#an-example-transcripts-of-meetings","title":"An example: transcripts of meetings","text":"<p>In order to process transcript of meetings it is necessary to define both the groups  that will be used in the transcription of the sources and the tables that will store the information in the database.</p> <p>In the mapping for the Portuguese act called \"acta\" (minutes, or transcript, normally of a meeting) the groups used are defined in a <code>str</code> file:</p> <pre><code>part name=historical-act;\n    guaranteed=id,type,date;\n    position=id,type,date;\n    also=loc,ref,obs,day,month,year;\n    arbitrary=person,object,geoentity,abstraction,ls,atr,rel\n\nelement name=day; type=number\nelement name=month; type=number\nelement name=year; type=number\nelement name=date;type=number\n\n\npart name=pt-acto; source=historical-act;\n    position=id,dia,mes,ano;\n    guaranteed=id,dia,mes,ano;\n    arbitrary=celebrante,actorm,actorf,\n              object,abstraction,ls,rel;\n    also=ref,loc,obs\n\nelement name=dia; source=day\nelement name=mes; source=month\nelement name=ano; source=year\nelement name=data; source=date\n\npart name=amz; source=pt-acto;\n    repeat=eleito,eleitor,referido;\n    guaranteed=id,dia,mes,ano,fol;\n    position=id,dia,mes,ano,fol;\n    also=resumo,obs\n</code></pre> <p>And now the mappings to database tables:</p> <pre><code>mapping 'historical-act' to class act.\nclass act super entity table acts with attributes\n    id column id baseclass id coltype varchar colsize 64 colprecision 0 pkey 1\nand\n    date column the_date baseclass date coltype varchar colsize 24 colprecision 0 pkey 0\nand\n    type column the_type baseclass type coltype varchar colsize 32 colprecision 0 pkey 0\nand\n    loc column loc baseclass loc coltype varchar colsize 64 colprecision 0 pkey 0\nand\n    ref column ref baseclass ref coltype varchar colsize 64 colprecision 0 pkey 0\nand\n    obs column obs baseclass obs coltype varchar colsize 16654 colprecision 0 pkey 0 .\n\n\nmapping amz to class acta.\nclass acta super act table actas with attributes\n    id column id baseclass id coltype varchar colsize 64 colprecision 0 pkey 1\nand\n    dia column the_day baseclass day coltype numeric colsize 2 colprecision 0 pkey 0\nand\n    mes column the_month baseclass month coltype numeric colsize 2 colprecision 0 pkey 0\nand\n    ano column the_year baseclass year coltype numeric colsize 4 colprecision 0 pkey 0\nand\n    fol column fol baseclass fol coltype varchar colsize 64 colprecision 0 pkey 0\nand\n    resumo column resumo baseclass resumo coltype varchar colsize 1024 colprecision 0 pkey 0\nand\n    obs column obs baseclass obs coltype varchar colsize 16654 colprecision 0 pkey 0 .\n</code></pre> <p>The attributes names in Portuguese (dia,mes,ano) are mapped to standard classes (day,month,year) and conform column names that do not conflict with reserved words in database systems (the_day, the_month, the_year).</p> <p>With this information <code>timelink</code> is able to process a transcription such as: <pre><code>amz$amz1/3/10/1683/fol=2\n    /resumo=nomeacao de capelao que se fez na casa desta\n     vila de soure por morte do padre simao homem de oliveira\n</code></pre></p> <p>This is the way the above transcription is exported by the translator <pre><code>&lt;CLASS NAME=\"acta\" SUPER=\"act\" TABLE=\"actas\" GROUP=\"amz\"&gt;\n    &lt;ATTRIBUTE NAME=\"id\" COLUMN=\"id\" CLASS=\"id\" TYPE=\"varchar\" SIZE=\"64\" PRECISION=\"0\" PKEY=\"1\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"dia\" COLUMN=\"the_day\" CLASS=\"day\" TYPE=\"numeric\" SIZE=\"2\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"mes\" COLUMN=\"the_month\" CLASS=\"month\" TYPE=\"numeric\" SIZE=\"2\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"ano\" COLUMN=\"the_year\" CLASS=\"year\" TYPE=\"numeric\" SIZE=\"4\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"fol\" COLUMN=\"fol\" CLASS=\"fol\" TYPE=\"varchar\" SIZE=\"64\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"resumo\" COLUMN=\"resumo\" CLASS=\"resumo\" TYPE=\"varchar\" SIZE=\"1024\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"obs\" COLUMN=\"obs\" CLASS=\"obs\" TYPE=\"varchar\" SIZE=\"16654\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n&lt;/CLASS&gt;\n\n&lt;GROUP ID=\"amz1\" NAME=\"amz\" CLASS=\"acta\" ORDER=\"2\" LEVEL=\"2\" LINE=\"6\"&gt;\n&lt;ELEMENT NAME=\"line\" CLASS=\"line\"&gt;&lt;core&gt;6&lt;/core&gt;&lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"id\" CLASS=\"id\"&gt;&lt;core&gt;amz1&lt;/core&gt;&lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"groupname\" CLASS=\"groupname\"&gt;&lt;core&gt;amz&lt;/core&gt;&lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"inside\" CLASS=\"inside\"&gt;&lt;core&gt;mis-mesa-1&lt;/core&gt;&lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"class\" CLASS=\"class\"&gt;&lt;core&gt;acta&lt;/core&gt;&lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"order\" CLASS=\"order\"&gt;&lt;core&gt;2&lt;/core&gt;&lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"level\" CLASS=\"level\"&gt;&lt;core&gt;2&lt;/core&gt;&lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"dia\" CLASS=\"day\"&gt;\n&lt;core&gt;&lt;![CDATA[3]]&gt;&lt;/core&gt; &lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"mes\" CLASS=\"month\"&gt;\n&lt;core&gt;&lt;![CDATA[10]]&gt;&lt;/core&gt; &lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"ano\" CLASS=\"year\"&gt;\n&lt;core&gt;&lt;![CDATA[1683]]&gt;&lt;/core&gt; &lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"fol\" CLASS=\"fol\"&gt;\n&lt;core&gt;&lt;![CDATA[2]]&gt;&lt;/core&gt; &lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"resumo\" CLASS=\"resumo\"&gt;\n&lt;core&gt;&lt;![CDATA[nomeacao de capelao que se fez na casa desta vila de soure por morte do padre simao homem de oliveira]]&gt;&lt;/core&gt;\n&lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"date\" CLASS=\"date\"&gt;\n&lt;core&gt;&lt;![CDATA[16831003]]&gt;&lt;/core&gt; &lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"type\" CLASS=\"type\"&gt;\n&lt;core&gt;&lt;![CDATA[amz]]&gt;&lt;/core&gt; &lt;/ELEMENT&gt;\n&lt;/GROUP&gt;\n</code></pre></p> <p>Note that the elements of the group are exported in XML with class derived from the elements source parameter:</p> <pre><code>element name=dia; source=day\nelement name=mes; source=month\nelement name=ano; source=year\n</code></pre> <p>Which generates the <code>CLASS</code> attribute in XML <pre><code>&lt;ELEMENT NAME=\"dia\" CLASS=\"day\"&gt;\n\n&lt;core&gt;&lt;![CDATA[3]]&gt;&lt;/core&gt; &lt;/ELEMENT&gt;\n\n&lt;ELEMENT NAME=\"mes\" CLASS=\"month\"&gt;\n\n&lt;core&gt;&lt;![CDATA[10]]&gt;&lt;/core&gt; &lt;/ELEMENT&gt;\n\n&lt;ELEMENT NAME=\"ano\" CLASS=\"year\"&gt;\n</code></pre></p> <p>During import Timelink will determine the mapping information to be used for the incoming Kleio group, from the group XML information:</p> <pre><code>&lt;GROUP ID=\"amz1\" NAME=\"amz\" CLASS=\"acta\" ORDER=\"2\" LEVEL=\"2\" LINE=\"6\"&gt;\n</code></pre> <p>It will then go through each of the attributes of database class <code>acta</code> and fetch the group element with CLASS equal to the attribute baseclass. The value of the element is used to set the corresponding column in the table <code>actas</code>.</p> <p>Note that the mapping allows for the usage of a Kleio group with a evocative name \"amz\" while using a more generic table name <code>actas</code>.</p>"},{"location":"reference/source_db_mappings_semantics/","title":"Timelink data concepts and models","text":"<p>The uniqueness of Timelink resides in its capability of processing rich textual transcriptions and insert information in a structured relational database, that can be explored with modern data science tools.</p> <p>This document explains at a technical level how the mapping between the source transcription and the database works. For more information about the <code>kleio</code> notation used  for source transcriptions see: kleio Notation Reference</p>"},{"location":"reference/source_db_mappings_semantics/#summary","title":"Summary","text":"<p>Timelink uses a dual model to represent historical information.</p> <ul> <li>A source-oriented text-oriented data model is used to transcribe     sources with little loss of information.</li> <li>A person-oriented relational database model, consolidates biographical data,     handles inference of networks and reversible record linking</li> </ul> <p>The <code>Kleio</code> notation (Manfred Thaller) is used for source-oriented data input.</p> <p>A relational database structure is used to store person-oriented data, keeping the original source context.</p> <p>A special software, the Kleio translator processes text transcriptions of the sources in <code>kleio</code> notation and generates data for the the person-oriented database.</p> <p>This solves the inevitable tension between a source-oriented model, that aims to preserve the rich complexity of the data source and an analytical mode that requires a formal representation of data and the expression of complex queries.</p>"},{"location":"reference/source_db_mappings_semantics/#the-source-oriented-model","title":"The Source Oriented Model","text":"<p>Uses a containment structure of <code>source-&gt;act/events-&gt;persons</code> and <code>objects</code>.</p> <p>The source oriented model uses a number of key terms in a formal way: <code>source</code>, <code>act</code>, <code>person</code>, <code>object</code>, <code>function</code>, <code>attribute</code> and <code>relation</code>.</p> <ul> <li>A historical <code>source</code> contains one or more <code>acts</code> or <code>events</code></li> <li>An <code>event</code> is something that happened in the past. Events are normally recorded in historical documents as <code>acts</code></li> <li>An <code>act</code> is a record of events described in the sources     (a baptism, a marriage, a sale contact, a rental contract, ...)</li> <li>An <code>act</code> contains actors (<code>persons</code>) and <code>objects</code>     (things, properties, institutions, ...).</li> <li><code>persons</code> and <code>objects</code> appear in <code>acts</code> with specific <code>functions</code>     (father in a baptism, owner in a sale contract, house in a rental contract).</li> <li><code>Actors</code> and <code>objects</code> are described by <code>attributes</code>     (name, age, gender, price, area, ...).</li> <li><code>Actors</code> and <code>objects</code> are linked by <code>relations</code>. Relations are described     by a type (kin, economical, professional), and a value     (brother, lender, apprentice).</li> <li>Every <code>act</code>, <code>function</code>, <code>attribute</code> and <code>relation</code> has a date     and a link to the point in the original source where it appeared.</li> </ul>"},{"location":"reference/source_db_mappings_semantics/#example-of-the-kleio-notation","title":"Example of the Kleio notation","text":"<p>A baptism:</p> <pre><code>    baptism$17/9/1685/parish church\n        n$manuel/m\n            father$jose luis\n                attr$residence/casal da corujeira\n            mother$domingas jorge\n            gfather$francisco rodrigues/id=b1685.9.17.gf\n                attr$residence/moinhos do paleao\n            gmother$maria pereira\n                rel$kin/wife/francisco rodrigues/b1685.9.17.gf\n</code></pre> <p>This example shows an <code>act</code> (a baptism) that contains five <code>persons</code>: child (\"n\"), father, mother, god father and god mother. Two of the people, the father and the god father have the <code>atribute</code> residence, and the god mother has a kin <code>relation</code> with the god father.</p>"},{"location":"reference/source_db_mappings_semantics/#the-person-oriented-model","title":"The Person Oriented Model","text":"<p>The <code>Person Oriented Model</code> represents a biography through 3 domains:</p> <ul> <li>Functions (the roles of the person in acts)</li> <li>Attributes</li> <li>Relations</li> </ul> <p>The <code>Person Oriented Model</code> is an alternative view on the information recorded in the sources, in a way that facilitates statistical analysis, network analysis and prosopographies.</p> <p>The previous baptism generates information as follows (italics show information inferred by Timelink).</p>"},{"location":"reference/source_db_mappings_semantics/#entities","title":"Entities","text":"Id Class Inside bapt1685-1700 source --- b1 act bapt1685-1700 b1-per1 person b1 b1685.9.17.gf person b1 b1-per2 person b1 b1-per3 person b1 <p>Note that each entity has an unique identifier: <code>id</code>. Such identifier is necessary to refer unambiguosly to a <code>person</code>, <code>object</code>, <code>act</code> or <code>source</code>.</p> <p>Most <code>ids</code> are generated automatically by the Kleio translator when processing the source transcripts, but in some circunstances they need to be explicitly given, when a link between two entities needs to be recorded in an non ambiguous way, such as the relation between godmother and godfather in the example above.</p>"},{"location":"reference/source_db_mappings_semantics/#persons","title":"Persons","text":"Id Nome Gender b1-per1 manuel f b1-per2 jose luis m b1-per3 domingas jorge f b1985.9.17.gf francisco rodrigues m b1.per5 maria pereira f"},{"location":"reference/source_db_mappings_semantics/#attributes","title":"Attributes","text":"Entity Type Value Date b1-per1i residence Casal da Corujeira 17/9/1685 b1985.9.17.gf residence Moinhos do Paleao 17/9/1685"},{"location":"reference/source_db_mappings_semantics/#relations","title":"Relations","text":"Origin Destination Type Value Date b1-per2 b1-per3 kin husband 17/9/1685 b1-per5 b1985.9.17.gf kin wife 17/9/1685 b1-per2 b1-per1 kin father 17/9/1685"},{"location":"reference/source_db_mappings_semantics/#functions","title":"Functions","text":"<p>Functions of people (father,mother, ...) in acts are a special case of relations linking people to acts, with the type 'function-in-act'. The same applies to objects, when they appear in acts.</p> Origin Destination Type Value Date b1985.9.17.gf b1 function-in-act gfather 17/9/1685 b1.per5 b1 function-in-act gmother 17/9/1685"},{"location":"reference/source_db_mappings_semantics/#how-translation-between-som-and-pom-works","title":"How translation between SOM and POM works","text":"<p>Timelink contains a set of basic entities: sources, acts, persons, objects, attributes and relations. For an example such as the previous one to work, Timelink needs to know the correspondence between the Kleio notation and the relational database tables, as well as how to infer values like gender and kin relations.</p>"},{"location":"reference/source_db_mappings_semantics/#terminology-note","title":"Terminology note","text":"<p>When describing both the Source Oriented Model and the Person Oriented Model different terms are used to describe concepts that are similar.</p> <p>In both the Source Oriented Model (SOM) and the Person Oriented Model (POM), we have concepts for entities that existed, such as sources, transcriptions of acts, people, and objects.</p> <p>These entities have attributes that provide information about them, such as names, dates, and archival locations.</p> <p>Additionally, both models include the concept of relations, which describe the connections between entities.</p> <p>For example, with relations, we can specify that person X is the father of person Y or that person Z bought property W.</p> <p>Since Timelink bridges different types of data models, which have their own literature and terminology, it is sometimes confusing to what exactly terms like \"attribute\", \"entity\", \"relation\" refer to.</p> <p>In the context of a database, entities such as persons, objects, acts, and sources are represented as rows in different database tables. Each table column corresponds to an attribute of the entities of the same type, storing information such as names, dates, and other relevant data.</p> <p>At a higher level, when describing the structure of information, we will use the terminology defined by the <code>Entity-Relationship-Model &lt;https://en.wikipedia.org/wiki/Entity\u2013relationship_model&gt;</code>_ (ER Model)</p> <ul> <li>Entity: something that existed in the real world:     sources, acts, people, also \"abstractions\" like institutions and     events like baptisms or marriages.</li> <li>Relation: relations between entities     like kinship relations between     people, ownership relations between people and properties, roles     of people participating in acts</li> <li>Attribute: items of information that describe entities and relations     (names, dates, kinship terms, prices of transactions)</li> <li>Entity-class or entity-type: a category of Entities described by the same attributes     <code>person</code> is a entity class, <code>building</code> is     another entity class and so is <code>acts</code>; each is described by different attributes.</li> <li>Entity instance: a specific entity of a specific class     (the person named Galileo Galillei, the building named 'Tower of Pisa',     the baptism that occurred in 8/7/1685 in the church of Soure, Portugal ).</li> </ul> <p>We refer to the concepts above to introduce the terminology specific to the SOM and POM models.</p> <p>For the SOM the main terms are Group,Element and Aspect used by Manfred Thaller in the Kleio notation.</p> <ul> <li>Group: corresponds to entities.</li> <li>Element: corresponds to attributes.</li> <li>Aspect: represent extra information about attributes.     The Kleio notation allows to register not only the core value of an     attribute but also a comment and the original wording in the document.</li> </ul> <p>In Timelink Kleio groups are used also to record attributes of entities that vary with time, like residence or profession.</p> <p>These attributes have not just a value (\"Abbey Road\", \"Musician\") but also have associated a date. So they have their own attributes (dates for one), like entities. In the ER Model this type of information is called a \"weak entity\": they have their own attributes like entities, but they do not correspond to something that exists on its own in the real world, they depend on a main entity.</p> <p>In the SOM model Kleio groups are also used to record relations.</p> <p>In the POM we use the terminology of databases: tables and columns.</p> <ul> <li>Table: corresponds to entities</li> <li>Columns: corresponds to attributes</li> </ul> <p>In the Person Oriented Model tables are also used to represent relationships between entities and time varying attributes.</p>"},{"location":"reference/source_db_mappings_semantics/#mapping-kleio-groups-to-database-tables","title":"Mapping Kleio Groups to Database tables","text":""},{"location":"reference/source_db_mappings_semantics/#overview","title":"Overview","text":"<p>The correspondence between the Kleio groups, elements and aspects, on one side, and tables and columns in a relational database is defined by conventions and configuration files in Timelink.</p> <p>Basic correspondence is provided by Timelink for basic entity types like sources, acts, people, objects. This allows Timelink to process generic Kleio transcriptions into generic tables as demonstrated in the example of the baptism above.</p> <p>In most cases a transcription closer to the source is desired, either because of readability (we rather read <code>baptism$</code> than  <code>act$</code> and <code>father$</code> than  <code>person$ ) or because the source describes entities with specific attributes (for instance a land property being sold is an</code>object` which can have special attributes such as area and a typology like rural/urban).</p> <p>To be able to use Kleio to record in a format closer to the source we need to provide Timelink with mapping information between the terminology used in the source and the core groups and elements.</p>"},{"location":"reference/source_db_mappings_semantics/#mapping-scenarios","title":"Mapping scenarios","text":"<p>The mapping configuration process addresses several scenarios of different complexity:</p> <ol> <li>Define new  names for the base groups so that the vocabulary of the transcription is closer to the original source<ul> <li>e.g. <code>baptims</code> instead of <code>act</code>, <code>father</code> and <code>mother</code> instead of <code>person</code> or <code>land</code> instead of <code>object</code></li> </ul> </li> <li>Define which groups can appear inside other groups.<ul> <li>e.g the group \"baptism\" can only contain groups named <code>child, father, mother, godfather, godmother</code>.</li> <li>This is what is known as a Meronomy or partonomy</li> </ul> </li> <li>Define new names for the builtin elements of the groups<ul> <li>e.g. <code>nome</code> instead of <code>name</code> and <code>dia, m\u00eas, ano</code> instead of <code>day, month, year</code>.</li> </ul> </li> <li> <p>Define new groups that extend the existing groups by adding different elements, and so require also new database tables to store that information</p> <ul> <li>e.g. a group \"baptism\" extends \"act\" adding the element \"date-of-birth\".</li> </ul> </li> <li> <p>If there is information to be inferred from the transcription (attributes or relations), what are the rules to be used for inference</p> <ul> <li>e.g. the element <code>sex</code> can be inferred if groups such as <code>father</code>     and <code>mother</code> are used instead of <code>person</code></li> </ul> </li> </ol>"},{"location":"reference/source_db_mappings_semantics/#configuration-of-mappings","title":"Configuration of mappings","text":"<p>Currently three types of configuration files are used to provide this information:</p> structure (str) files define new groups and their relation with core groups, any extra elements that  new groups might include, and the order by which the groups may appear;  str files define the way sources can be transcribed. mappings files Describe how new groups map to existing database tables and     can define new database table. inference files contain rules for inference of attributes and relations from the groups in the transcriptions <p>Here we describe the content of a mapping file.</p> <p>Here is an example of a mapping, in the current notation:</p> <pre><code>mapping person to class person.\nclass person super entity table persons\nwith attributes\n    id column id baseclass id coltype varchar colsize 64 colprecision 0 pkey 1\n and\n    name column name baseclass name coltype varchar colsize 128 colprecision 0 pkey 0\n and\n    sex column sex baseclass sex coltype char colsize 1 colprecision 0 pkey 0\n and\n    obs column obs baseclass obs coltype varchar colsize 16654 colprecision 0 pkey 0 .\n</code></pre> <p>The statement:</p> <pre><code>mapping person to class person.\n</code></pre> <p>means that the Kleio group <code>person</code> will be stored in the database as an entity of class <code>person</code>.</p> <p>The statement:</p> <pre><code>class person super entity table persons\n</code></pre> <p>means that database entity class <code>person</code> is a specialization of <code>entity</code>, and is stored in a table named <code>persons</code>.</p> <p>The subsequent lines after <code>with attributes</code> specify the mapping between the database entity attributes, stored as columns in tables and group elements.</p> <p>For each attribute the following is specified:</p> <ul> <li>name of the attribute in the group.</li> <li>column: name of the column in the database for this element; normally it is the same and id, but it can happen that the name of the attribute in entity class is a reserved word for database columns (for instance \"value\" or \"type\"). This  information</li> <li>baseclass: the kleio element class for this attribute</li> <li>coltype, colsize, colprecision: information used to create the column in the database     precision only applies if coltype is \"DECIMAL\"</li> <li>pkey: integer,if this attribute is part of the primary key of the table, this is the order</li> </ul> <p>The <code>baseclass</code> refers to certain attribute names that have special meaning.</p> <p>For instance,day,month,year,id,obs, same_as are names of elements that have special meaning in the translation of sources and mapping of data into the database.</p> <p>In the mapping for portuguese act called \"acta\" (minutes, or transcript, normally of a meeting):</p> <pre><code>part name=historical-act;\n     guaranteed=id,type,date;\n     position=id,type,date;\n     also=loc,ref,obs,day,month,year;\n     arbitrary=person,object,geoentity,abstraction,ls,atr,rel\n\nelement name=day; type=number\nelement name=month; type=number\nelement name=year; type=number\nelement name=date;type=number\n\npart name=pt-acto; source=historical-act;\n     arbitrary=celebrante,actorm,\n         actorf,object,abstraction,ls,rel;\n     position=id,dia,mes,ano;\n     guaranteed=id,dia,mes,ano;\n     also=ref,loc,obs\n\nelement name=dia; source=day\nelement name=mes; source=month\nelement name=ano; source=year\nelement name=data; source=date\n\npart name=amz;\n source=pt-acto;\n repeat=eleito,eleitor,referido;\n guaranteed=id,dia,mes,ano,fol;\n position=id,dia,mes,ano,fol;\n also=resumo,obs\n</code></pre> <pre><code>mapping 'historical-act' to class act.\nclass act super entity table acts\n    with attributes\n    id column id baseclass id coltype varchar colsize 64 colprecision 0 pkey 1\n         and\n    date column the_date baseclass date coltype varchar colsize 24 colprecision 0 pkey 0\n         and\n    type column the_type baseclass type coltype varchar colsize 32 colprecision 0 pkey 0\n         and\n    loc column loc baseclass loc coltype varchar colsize 64 colprecision 0 pkey 0\n         and\n    ref column ref baseclass ref coltype varchar colsize 64 colprecision 0 pkey 0\n         and\n    obs column obs baseclass obs coltype varchar colsize 16654 colprecision 0 pkey 0 .\n\nmapping amz to class acta.\n\nclass acta super act table actas\n    with attributes\n    id column id baseclass id coltype varchar colsize 64 colprecision 0 pkey 1\n         and\n    dia column the_day baseclass day coltype numeric colsize 2 colprecision 0 pkey 0\n         and\n    mes column the_month baseclass month coltype numeric colsize 2 colprecision 0 pkey 0\n         and\n    ano column the_year baseclass year coltype numeric colsize 4 colprecision 0 pkey 0\n         and\n    fol column fol baseclass fol coltype varchar colsize 64 colprecision 0 pkey 0\n         and\n    resumo column resumo baseclass resumo coltype varchar colsize 1024 colprecision 0 pkey 0\n         and\n    obs column obs baseclass obs coltype varchar colsize 16654 colprecision 0 pkey 0 .\n</code></pre> <p>Thee mapping allows for the usage of a Kleio group with a evocative name \"amz\" while using a more generic name <code>acta</code>.</p> <p>The attributes names in Portuguese (dia,mes,ano) are mapped to standard classes (day,month,year) and conform column names that do not conflict with reserved words in database systems (the_day, the_month, the_year). <pre><code>    amz$amz1/3/10/1683/fol=2\n        /resumo=nomeacao de capelao que se fez na casa desta\n                vila de soure por morte do padre simao homem de oliveira\n</code></pre> The <code>Kleio</code> translator processes the transcription and generates a xml file that includes the mapping information and the groups data.</p> <pre><code>&lt;CLASS NAME=\"acta\" SUPER=\"act\" TABLE=\"actas\" GROUP=\"amz\"&gt;\n    &lt;ATTRIBUTE NAME=\"id\" COLUMN=\"id\" CLASS=\"id\" TYPE=\"varchar\" SIZE=\"64\" PRECISION=\"0\" PKEY=\"1\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"dia\" COLUMN=\"the_day\" CLASS=\"day\" TYPE=\"numeric\" SIZE=\"2\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"mes\" COLUMN=\"the_month\" CLASS=\"month\" TYPE=\"numeric\" SIZE=\"2\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"ano\" COLUMN=\"the_year\" CLASS=\"year\" TYPE=\"numeric\" SIZE=\"4\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"fol\" COLUMN=\"fol\" CLASS=\"fol\" TYPE=\"varchar\" SIZE=\"64\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"resumo\" COLUMN=\"resumo\" CLASS=\"resumo\" TYPE=\"varchar\" SIZE=\"1024\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"obs\" COLUMN=\"obs\" CLASS=\"obs\" TYPE=\"varchar\" SIZE=\"16654\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n\n&lt;/CLASS&gt;\n</code></pre> <p>This is the way the above transcription is exported by the translator</p> <pre><code>    &lt;GROUP ID=\"amz1\" NAME=\"amz\" CLASS=\"acta\" ORDER=\"2\" LEVEL=\"2\" LINE=\"6\"&gt;\n        &lt;ELEMENT NAME=\"line\" CLASS=\"line\"&gt;&lt;core&gt;6&lt;/core&gt;&lt;/ELEMENT&gt;\n        &lt;ELEMENT NAME=\"id\" CLASS=\"id\"&gt;&lt;core&gt;amz1&lt;/core&gt;&lt;/ELEMENT&gt;\n        &lt;ELEMENT NAME=\"groupname\" CLASS=\"groupname\"&gt;&lt;core&gt;amz&lt;/core&gt;&lt;/ELEMENT&gt;\n        &lt;ELEMENT NAME=\"inside\" CLASS=\"inside\"&gt;&lt;core&gt;mis-mesa-1&lt;/core&gt;&lt;/ELEMENT&gt;\n        &lt;ELEMENT NAME=\"class\" CLASS=\"class\"&gt;&lt;core&gt;acta&lt;/core&gt;&lt;/ELEMENT&gt;\n        &lt;ELEMENT NAME=\"order\" CLASS=\"order\"&gt;&lt;core&gt;2&lt;/core&gt;&lt;/ELEMENT&gt;\n        &lt;ELEMENT NAME=\"level\" CLASS=\"level\"&gt;&lt;core&gt;2&lt;/core&gt;&lt;/ELEMENT&gt;\n        &lt;ELEMENT NAME=\"dia\" CLASS=\"day\"&gt;\n        &lt;core&gt;&lt;![CDATA[3]]&gt;&lt;/core&gt;   &lt;/ELEMENT&gt;\n        &lt;ELEMENT NAME=\"mes\" CLASS=\"month\"&gt;\n        &lt;core&gt;&lt;![CDATA[10]]&gt;&lt;/core&gt;   &lt;/ELEMENT&gt;\n        &lt;ELEMENT NAME=\"ano\" CLASS=\"year\"&gt;\n        &lt;core&gt;&lt;![CDATA[1683]]&gt;&lt;/core&gt;   &lt;/ELEMENT&gt;\n        &lt;ELEMENT NAME=\"fol\" CLASS=\"fol\"&gt;\n        &lt;core&gt;&lt;![CDATA[2]]&gt;&lt;/core&gt;   &lt;/ELEMENT&gt;\n        &lt;ELEMENT NAME=\"resumo\" CLASS=\"resumo\"&gt;\n        &lt;core&gt;&lt;![CDATA[nomeacao de capelao que se fez na casa desta vila de soure por morte do padre simao homem de oliveira]]&gt;&lt;/core&gt;\n        &lt;/ELEMENT&gt;\n        &lt;ELEMENT NAME=\"date\" CLASS=\"date\"&gt;\n        &lt;core&gt;&lt;![CDATA[16831003]]&gt;&lt;/core&gt;   &lt;/ELEMENT&gt;\n        &lt;ELEMENT NAME=\"type\" CLASS=\"type\"&gt;\n        &lt;core&gt;&lt;![CDATA[amz]]&gt;&lt;/core&gt;   &lt;/ELEMENT&gt;\n    &lt;/GROUP&gt;\n</code></pre> <p>Note that the elements of the group are exported in XML with class derived from the elements source parameter:</p> <pre><code>element name=dia; source=day\nelement name=mes; source=month\nelement name=ano; source=year\n</code></pre> <p>Which generates the <code>CLASS</code> attribute in XML</p> <pre><code>&lt;ELEMENT NAME=\"dia\" CLASS=\"day\"&gt;\n     &lt;core&gt;&lt;![CDATA[3]]&gt;&lt;/core&gt;   &lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"mes\" CLASS=\"month\"&gt;\n     &lt;core&gt;&lt;![CDATA[10]]&gt;&lt;/core&gt;   &lt;/ELEMENT&gt;\n&lt;ELEMENT NAME=\"ano\" CLASS=\"year\"&gt;\n</code></pre>"},{"location":"reference/source_db_mappings_semantics/#translator-logic-for-group-to-class-mapping","title":"Translator logic for group to class mapping.","text":""},{"location":"reference/source_db_mappings_semantics/#mapping-group-to-database-class","title":"Mapping Group to Database class","text":"<p>The determination of the database class <code>a_class</code> associated with a group <code>a_group</code> is based on the following reasoning:</p> <ol> <li>In the mappings configuration there is a clause <code>mapping a_agroup to class a_class</code></li> <li>if not, there is a clause <code>mapping s_agroup to class a_class</code>  and <code>s_group</code> can be found in the <code>source</code> parameter of <code>a_group</code>, recursively.  In other words <code>a_group</code> descends from <code>s_group</code> .</li> </ol> <p>[!NOTE] Mapping of Group to Class depends on local mappings and structure files Since it is possible that different Kleio files are processed with specific structure files associated, and in the future also different mappings file, and since several Kleio files can feed a single database, it is possible that groups with the same name will map diferently to database tables in a single database.</p>"},{"location":"reference/source_db_mappings_semantics/#mapping-of-element-to-columns-in-tables","title":"Mapping of element to columns in tables","text":"<p>When processing an element of a group for export the Kleio translator determines the class of each element as follows:</p> <ol> <li>The class associated with the group  has an attribute with the same name as the element in the group: then the class of the element is obtained from the <code>baseclass</code> value of the class attribute.</li> <li>There element extends, through the parameter <code>source</code>, recursively, an element whose name appears as the name of an attribute in the class associated to the group of the element.</li> <li>The class associated with the group extends another class with has an attribute with the same name as the element.</li> </ol>"},{"location":"reference/source_db_mappings_semantics/#importer-logic-for-the-group-to-database-table-mapping","title":"Importer logic for the group to database table mapping","text":"<p>When the XML files created by the <code>kleio</code> translator is imported with the <code>timelink-py</code> package the mapping information is used to store the source data in the corresponding database tables.</p> <p>This import process is at the heart of the Timelink model of data management, and here we describe it in some detail.</p>"},{"location":"reference/source_db_mappings_semantics/#matching-groups-to-database-entities-in-import","title":"Matching groups to database entities in import","text":"<p>During import Timelink will determine the mapping information to be used for the incoming Kleio group, from the group XML information, using the value of the <code>CLASS</code> attribute: <pre><code>    &lt;GROUP ID=\"amz1\" NAME=\"amz\" CLASS=\"acta\" ORDER=\"2\" LEVEL=\"2\" LINE=\"6\"&gt;\n</code></pre></p> <p>In this example a group names \"amz1\" will be matched with database class \"acta\".</p> <p>Then the elements of the group can be matched with the attributes of the data class using the CLASS xml attribute present in both.</p> <p>So from:</p> <pre><code>&lt;GROUP ID=\"amz1\" NAME=\"amz\" CLASS=\"acta\" ORDER=\"2\" LEVEL=\"2\" LINE=\"6\"&gt;\n    &lt;ELEMENT NAME=\"dia\" CLASS=\"day\"&gt;\n         &lt;core&gt;&lt;![CDATA[3]]&gt;&lt;/core&gt;   &lt;/ELEMENT&gt;\n</code></pre> <p>and</p> <pre><code>&lt;CLASS NAME=\"acta\" SUPER=\"act\" TABLE=\"actas\" GROUP=\"amz\"&gt;\n    &lt;ATTRIBUTE NAME=\"dia\" COLUMN=\"the_day\" CLASS=\"day\" TYPE=\"numeric\" SIZE=\"2\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n</code></pre> <p>The importer determines that the information of group element \"dia\" should be stored in column \"the_day\", because the CLASS of ELEMENT \"dia\"  matched the CLASS of ATTRIBUTE \"dia\" and the respective COLUMN is \"the_day\".</p> <p>[!NOTE] Why GROUP-ELEMENT-NAME is not matched with CLASS-ATTRIBUTE-NAME Why don't we just use the NAME of both ELEMENT in GROUP and ATTRIBUTE in CLASS to find the correct column? The reason is to allow for different group to have different variant of element names for legibility with creating new classes.</p> <p>Imagine we want a french version of group \"amz\" called \"fr-amz\" that uses french in element names. <pre><code>element name=jour; source=day\nelement name=mois; source=month\nelement name=ann\u00e9e; source=year\nelement name=date; source=date\n\npart name=fr-amz;\n     source=pt-acto;\n     ...\n     position=id,jour,mois,ann\u00e9e,fol;\n     ...\n</code></pre></p> <p>And in mappings add: <pre><code>mapping 'fr-amz' to class acta.\n</code></pre></p>"},{"location":"reference/source_db_mappings_semantics/#process-class-mappings-embedded-in-the-xml-export","title":"Process CLASS mappings embedded in the XML export","text":"<p>The kleio translator embeds the class mappings in the XML export. <pre><code>&lt;CLASS NAME=\"acta\" SUPER=\"act\" TABLE=\"actas\" GROUP=\"amz\"&gt;\n    &lt;ATTRIBUTE NAME=\"id\" COLUMN=\"id\" CLASS=\"id\" TYPE=\"varchar\" SIZE=\"64\" PRECISION=\"0\" PKEY=\"1\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"dia\" COLUMN=\"the_day\" CLASS=\"day\" TYPE=\"numeric\" SIZE=\"2\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"mes\" COLUMN=\"the_month\" CLASS=\"month\" TYPE=\"numeric\" SIZE=\"2\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"ano\" COLUMN=\"the_year\" CLASS=\"year\" TYPE=\"numeric\" SIZE=\"4\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"fol\" COLUMN=\"fol\" CLASS=\"fol\" TYPE=\"varchar\" SIZE=\"64\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"resumo\" COLUMN=\"resumo\" CLASS=\"resumo\" TYPE=\"varchar\" SIZE=\"1024\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n    &lt;ATTRIBUTE NAME=\"obs\" COLUMN=\"obs\" CLASS=\"obs\" TYPE=\"varchar\" SIZE=\"16654\" PRECISION=\"0\" PKEY=\"0\" &gt;&lt;/ATTRIBUTE&gt;\n\n&lt;/CLASS&gt;\n</code></pre></p> <p>With this information the importer is able to dynamically create new database tables as necessary. Note that the XML file also includes the class mappings of the built in models (entity, source, act, person, object, geo entity, attribute, relation), but these are ignored by the import process, which uses the most updated versions of the mappings in the timelink-py package.</p> <p>When a CLASS section is detected in the XML file, if it refers to a builtin, it is ignored. If not, a new table is created along with a SQLAlchemy model for access in Jupiter notebooks and Python applications.</p>"},{"location":"reference/source_db_mappings_semantics/#process-a-group-element-in-the-xml-export","title":"Process a GROUP element in the XML export","text":"<p>When a GROUP element is encountered in the XML import file the following logic is executed:</p>"},{"location":"reference/source_db_mappings_semantics/#find-the-pomsommapper-corresponding-to-the-group-using-the-class-attribute-of-the-group-xml-element-as-the-id-of-pomsommapper","title":"Find the PomSomMapper corresponding to the GROUP, using the CLASS attribute of the GROUP XML Element as the id of PomSomMapper.","text":"<pre><code>&lt;GROUP ID=\"amz1\" NAME=\"amz\" CLASS=**\"acta\"** ORDER=\"2\" LEVEL=\"2\" LINE=\"6\"&gt;\n</code></pre> <p>this is done with</p> <pre><code>pom_class=PomSomMapper.get_pom_class_from_group(group,...)\n</code></pre>"},{"location":"reference/source_db_mappings_semantics/#get-the-orm-model-associated-with-this-pomsommapper","title":"Get The ORM model associated with this PomSomMapper.","text":"<pre><code>orm_model = pom_class.orm_class\n</code></pre> <p>The ORM class must exist at this point. it is either a builtin model in <code>timelink.models.api</code> or it was created dynamically from a database class definition such as above by the method</p> <pre><code>PomSomMapper.ensure_mapping().\n</code></pre> <ol> <li>Get the name of the columns mapped to the attributes of the ORM model. The list of columns mapped to the ORM attributes is obtained by <code>sqlalchemy.inspect(orm_model_class).columns</code></li> <li>For each column associated to the ORM model, get the corresponding entry in the CLASS attributes, using <code>PomSomMaper.column_to_class_attribute(column_name,...)</code></li> <li>in the class attribute corresponding to the ORM column name, get the CLASS (baseclass) and  ELEMENT in GROUP section</li> <li>Store the core value of the element in the corresponding column of the ORM model</li> <li>Store the extra information about the element in the extra_info columns of the ORM model. The extra info can be: the original name of the element in the group, comment text and original wording text.</li> </ol> <p>Several Groups can map to the same table/entitiy (father, mother, grandfather, godfather, child all map to the person Entitiy and persons table)</p>"},{"location":"reference/source_db_mappings_semantics/#summary_1","title":"Summary","text":"<ol> <li>KleioHandler.newGroup.a_group -&gt; PomSomMapper.storeGroup(a_group)</li> <li>PomSomMapper -&gt; pom_class = PomSomMapper.get_pom_class_from_group(a_group, session)</li> <li>orm_mapper = pom_class.orm_class</li> <li>orm_mapper ...</li> </ol>"},{"location":"reference/source_db_overview/","title":"Source db overview","text":"<p><code>timelink</code> contains a series of schemes for the transcription of sources that, when processed, generate data for database input.</p> <p>In the previous section it was explained how to define new source formats for more efficient data collection.</p> <p>In this section we will see how to create new database tables to store new types of information generated by the source formats</p> <p>First we give an overview of how the source to database mapping works.</p> <p>How_Source-Database_mappings_works</p>"},{"location":"reference/timelink_home/","title":"Timelink home","text":""},{"location":"reference/timelink_home/#what-is-a-timelink-home","title":"What is a Timelink home","text":"<p>\"Timelink home\" represents the base directory of a specific <code>timelink</code> web site.  The <code>timelink</code> web application will serve information from that base directory.</p> <p>The <code>timelink</code> webapp can be used in two modes:</p> <ol> <li>single-user, single-project mode</li> <li>multi-user, multi-project mode. </li> </ol> <p>In both cases the webapp is associated with a base directory, called <code>timelink_home</code>.  The internal layout of the <code>timelink_home</code> is different in both casas, as explained bellow.</p>"},{"location":"reference/timelink_home/#what-is-a-project","title":"What is a \"project\"","text":"<p>A \"project\" in <code>timelink</code> is the association of a set of <code>kleio</code> files with a database.  </p> <p>Normally, the information about a project is kept in a directory in the filesystem, from where the <code>timelink</code> obtains the necessary information.</p> <p>But it is possible that the webapp runs in a machine publishing a project with files in another machine and the database in yet another.</p> <p>This is possible because <code>timelink</code> manages files through a Kleio Server and the database through a SQLAlchemy url, which can reference a remote database server (e.g. postgres).</p>"},{"location":"reference/timelink_home/#single-user-single-project-timelink-home","title":"Single-user, single project timelink-home","text":"<p>In a single-user instalation the web app will serve one project, and timelink-home is a project directory, with a standard structure:</p> <pre><code>\u251c\u2500\u2500 single-project   &lt;-- timelink-home\n\u2502 \u251c\u2500\u2500 database\n\u2502 \u251c\u2500\u2500 extras\n\u2502 \u251c\u2500\u2500 inferences\n\u2502 \u251c\u2500\u2500 notebooks\n\u2502 \u251c\u2500\u2500 sources\n\u2502 \u2514\u2500\u2500 structures\n\u2502 .timelink-project # place holder file to indicate this is a timelink project directory\n</code></pre>"},{"location":"reference/timelink_home/#multi-user-multi-project-timelink-home","title":"Multi-user, multi-project timelink-home","text":"<p>In a multi-project installation the web app will serve multiple projects and users, and timelink_home is a directory that contains a <code>projects</code> with mujltiple subdirectories, and other support directories.</p> <pre><code>\u251c\u2500\u2500 multiproject-dir  &lt;-timelink-home\n    \u251c\u2500\u2500 projects\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 test-project\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 sqlite  &lt;-- each project its database\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 structures\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 web-tests\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 database\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 sqlite\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 extras\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 identifications\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 inferences\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 notebooks\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 sources\n    \u2514\u2500\u2500 system\n        \u251c\u2500\u2500 db\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 sqlite\n        \u2514\u2500\u2500 stru\n    .timelink-home # place holder file to indicate this is a timelink home directory\n</code></pre> <p>Same directory can be served as a single project or as part of a multi-project site</p> <p>A project directory inside a mutiproject dir can be accessed both as stand alone single user or as part of a web interface for multiple projects and multiple users. It depends on the base directory given to the start command. Multiple variants can exist in the same machine, serving different ports. </p>"},{"location":"reference/timelink_home/#special-cases","title":"Special cases","text":""},{"location":"reference/timelink_home/#single-project-multiple-subprojects","title":"Single project, multiple subprojects","text":"<p>In some complex projects, there can be more than one project directory for different types of sources, managed by different researchers and a too level project that aggregates all of them. </p> <p>This is implemented  with git [submodules] (https://git-scm.com/book/en/v2/Git-Tools-Submodules).</p> <p>This type of structure is treated as a single-project</p> <p>In this case the structure is:</p> <pre><code>| toplevel-project  &lt;-- timelink-home\n\u251c\u2500\u2500 database\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sqlite   &lt;-- joint database all subprojects \n\u251c\u2500\u2500 extras\n\u251c\u2500\u2500 identifications\n\u251c\u2500\u2500 inferences\n\u251c\u2500\u2500 notebooks\n\u251c\u2500\u2500 sources   &lt;-- sources directory contain other project directories\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 china-coimbra-biografias  &lt;-- sub-project, git submodule \n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database   &lt;-- project database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 china-cronologia    &lt;-- sub-project, git submodule \n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database   &lt;-- project database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dehergne-repertoire   &lt;-- sub-project, git submodule \n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database  &lt;-- project database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 jesuitas-franco-imagem-virtude   &lt;-- sub-project, git submodule \n\u2502\u00a0\u00a0     \u251c\u2500\u2500 database &lt;-- project database\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 sources\n\u2502 .timelink-project # place holder file to indicate this is a timelink project directory\n</code></pre>"},{"location":"reference/timelink_home/#legacy-mhk-home-layouts","title":"Legacy mhk-home layouts","text":"<p>These are directory structures used in the previous version of <code>timelink</code> known as <code>MHK</code>.</p> <p>It is basically a multi-project layout, where the toplevel directory sources contains the equivalent of projects.</p> <pre><code>\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 pt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 scripts\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 container\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 host\n\u251c\u2500\u2500 sources  &lt;- projects directory\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 COMMEMORtis_SB  &lt;-- project\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 etc\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 system\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 china-coimbra  &lt;-- project\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 system\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 china-coimbra-biografias   &lt;-- project\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dehergne   &lt;-- project\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 etc\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 templates\n\u251c\u2500\u2500 system  &lt;-- MHK stuff\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 caddy\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 site\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 caddy\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 kleio\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mysql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 db\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 mhk\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mysql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 kleio\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 tomcat\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 vscode\n\u2514\u2500\u2500 users  &lt;-- MHK user configuration\n    \u251c\u2500\u2500 china_coimbra\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u251c\u2500\u2500 commersb\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u251c\u2500\u2500 commerst\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u251c\u2500\u2500 dehergne\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u251c\u2500\u2500 dehergne-locations\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u251c\u2500\u2500 demo\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u251c\u2500\u2500 fauc\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u2514\u2500\u2500 mhk\n        \u2514\u2500\u2500 conf\n</code></pre>"},{"location":"reference/web_timelink_home_layout/","title":"Web: Timelink home directory structure","text":""},{"location":"reference/web_timelink_home_layout/#what-is-a-timelink-home","title":"What is a Timelink home","text":"<p>\"Timelink home\" represents the base directory of a specific <code>timelink</code> web site.  The <code>timelink</code> web application will serve information from that base directory.</p> <p>The <code>timelink</code> webapp can be used in two modes:</p> <ol> <li>single-user, single-project mode</li> <li>multi-user, multi-project mode.</li> </ol> <p>In both cases the webapp is associated with a base directory, called <code>timelink_home</code>.  The internal layout of the <code>timelink_home</code> is different in both cases, as explained bellow.</p> <p>Note that in a given machine it is possible to have multiple <code>timelink_home</code> directories, each one serving a different port and different projects.</p>"},{"location":"reference/web_timelink_home_layout/#what-is-a-project","title":"What is a \"project\"","text":"<p>A \"project\" in <code>timelink</code> is the association of a set of <code>kleio</code> files with a database.</p> <p>Normally, the information about a project is kept in a directory in the filesystem, from where <code>timelink</code> obtains the necessary information.</p> <p>But it is possible that the webapp runs in a machine,  publishing a project with files in another machine and the database in yet another.</p> <p>This is possible because <code>timelink</code> manages files through a Kleio Server and the database through a SQLAlchemy url, which can reference a remote database server (e.g. postgres).</p>"},{"location":"reference/web_timelink_home_layout/#single-user-single-project-timelink-home","title":"Single-user, single project timelink-home","text":"<p>In a single-user instalation the web app will serve one project, and timelink-home is a project directory, with a standard structure:</p> <pre><code>\u251c\u2500\u2500 single-project   &lt;-- timelink-home\n\u2502 \u251c\u2500\u2500 database\n\u2502 \u251c\u2500\u2500 extras\n\u2502 \u251c\u2500\u2500 inferences\n\u2502 \u251c\u2500\u2500 notebooks\n\u2502 \u251c\u2500\u2500 sources\n\u2502 \u2514\u2500\u2500 structures\n\u2502 .timelink-project # place holder file to indicate this is a timelink project directory\n</code></pre>"},{"location":"reference/web_timelink_home_layout/#multi-user-multi-project-timelink-home","title":"Multi-user, multi-project timelink-home","text":"<p>In a multi-project installation the web app will serve multiple projects and users, and timelink_home is a directory that contains a <code>projects</code> with mujltiple subdirectories, and other support directories.</p> <pre><code>\u251c\u2500\u2500 multiproject-dir  &lt;-timelink-home\n    \u251c\u2500\u2500 projects\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 test-project\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 sqlite  &lt;-- each project its database\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 structures\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 web-tests\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 database\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 sqlite\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 extras\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 identifications\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 inferences\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 notebooks\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 sources\n    \u2514\u2500\u2500 system\n        \u251c\u2500\u2500 db\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 sqlite\n        \u2514\u2500\u2500 stru\n    .timelink-home # place holder file to indicate this is a timelink home directory\n</code></pre> <p>Same directory can be served as a single project or as part of a multi-project site</p> <p>A project directory inside a mutiproject dir can be accessed both as stand alone single user or as part of a web interface for multiple projects and multiple users. It depends on the base directory given to the start command. Multiple variants can exist in the same machine, serving different ports. </p>"},{"location":"reference/web_timelink_home_layout/#special-cases","title":"Special cases","text":""},{"location":"reference/web_timelink_home_layout/#single-project-multiple-subprojects","title":"Single project, multiple subprojects","text":"<p>In some complex projects, there can be more than one project directory for different types of sources, managed by different researchers and a too level project that aggregates all of them.</p> <p>This is implemented  with git [submodules] (https://git-scm.com/book/en/v2/Git-Tools-Submodules).</p> <p>This type of structure is treated as a single-project</p> <p>In this case the structure is:</p> <pre><code>| toplevel-project  &lt;-- timelink-home\n\u251c\u2500\u2500 database\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sqlite   &lt;-- joint database all subprojects\n\u251c\u2500\u2500 extras\n\u251c\u2500\u2500 identifications\n\u251c\u2500\u2500 inferences\n\u251c\u2500\u2500 notebooks\n\u251c\u2500\u2500 sources   &lt;-- sources directory contain other project directories\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 china-coimbra-biografias  &lt;-- sub-project, git submodule\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database   &lt;-- project database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 china-cronologia    &lt;-- sub-project, git submodule\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database   &lt;-- project database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dehergne-repertoire   &lt;-- sub-project, git submodule\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database  &lt;-- project database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 jesuitas-franco-imagem-virtude   &lt;-- sub-project, git submodule\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 database &lt;-- project database\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 sources\n\u2502 .timelink-project # place holder file to indicate this is a timelink project directory\n</code></pre>"},{"location":"reference/web_timelink_home_layout/#legacy-mhk-home-layouts","title":"Legacy mhk-home layouts","text":"<p>These are directory structures used in the previous version of <code>timelink</code> known as <code>MHK</code>.</p> <p>It is basically a multi-project layout, where the toplevel directory sources contains the equivalent of projects.</p> <pre><code>\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 pt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 scripts\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 container\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 host\n\u251c\u2500\u2500 sources  &lt;- projects directory\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 COMMEMORtis_SB  &lt;-- project\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 etc\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 system\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 china-coimbra  &lt;-- project\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 system\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 china-coimbra-biografias   &lt;-- project\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dehergne   &lt;-- project\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 database\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 etc\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extras\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 identifications\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 inferences\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 sources\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 structures\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 templates\n\u251c\u2500\u2500 system  &lt;-- MHK stuff\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 caddy\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 site\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 caddy\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 kleio\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mysql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 db\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 mhk\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mysql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 kleio\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 tomcat\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 vscode\n\u2514\u2500\u2500 users  &lt;-- MHK user configuration\n    \u251c\u2500\u2500 china_coimbra\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u251c\u2500\u2500 commersb\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u251c\u2500\u2500 commerst\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u251c\u2500\u2500 dehergne\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u251c\u2500\u2500 dehergne-locations\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u251c\u2500\u2500 demo\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u251c\u2500\u2500 fauc\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 conf\n    \u2514\u2500\u2500 mhk\n        \u2514\u2500\u2500 conf\n</code></pre>"},{"location":"roadmap/web_version/Tables/Entities_with_attributes/","title":"Entities with attributes","text":"<p>Select all the entities with a given attribute.  Filter by attribute value, dates, or a given group of people or objects.</p> <p>{Interface to<code>timelink.pandas.entities_with_attributes</code>}</p> <ol> <li>Select entity type  (must)<ol> <li>[pop up - only one] {select distinct the_type from entities}</li> </ol> </li> <li>Select columns of entity to show: <ol> <li>[[multiple selection]]  {TimeinkDatabase.get_columns(Entity_type)}</li> </ol> </li> <li>Select attribute type  (must) <ol> <li>[multiple selection]  {select distinct the_type from attributes</li> <li>in column named [text field] default selected type if only one</li> </ol> </li> <li>select value  (optionally)<ol> <li>multiple selection.  {select distinct the_value from attributes where the_type=selected attribute type} Note: if list more than 32 (parametrized) show textbox and user type values in rows.}</li> </ol> </li> <li>Other attributes to show in columns<ol> <li>[multiple selection]  {select distinct the_type from attributes}</li> </ol> </li> <li>date range (optionally):<ol> <li>After [Date1] Before [Date2]</li> </ol> </li> <li>Show only from list (optionally)<ol> <li>List of ids of name of saved list of ids [Text field]</li> </ol> </li> </ol> <p>Output de <code>timelink.pandas.entities_with_attributes</code> DataFrame  Button [Save as]  Format: one of Excel, Csv, JSON (user stand widget for this) Button: [Save ids]  Saves ids with a name, user.</p>"},{"location":"roadmap/web_version/Tables/Name%20to%20table/","title":"Name to table","text":"<p>List of people with a given name.</p> <p>Name: (name)</p>"},{"location":"roadmap/web_version/tmp_tables/entities_with_attributes/","title":"Entities with attributes","text":"<p>Select all the entities with a given attribute.  Filter by attribute value, dates, or a given group of people or objects.</p> <p>{Interface to<code>timelink.pandas.entities_with_attributes</code>}</p> <ol> <li>Select entity type  (must)<ol> <li>[pop up - only one] {select distinct the_type from entities}</li> </ol> </li> <li>Select columns of entity to show: <ol> <li>[[multiple selection]]  {TimeinkDatabase.get_columns(Entity_type)}</li> </ol> </li> <li>Select attribute type  (must) <ol> <li>[multiple selection]  {select distinct the_type from attributes</li> <li>in column named [text field] default selected type if only one</li> </ol> </li> <li>select value  (optionally)<ol> <li>multiple selection.  {select distinct the_value from attributes where the_type=selected attribute type} Note: if list more than 32 (parametrized) show textbox and user type values in rows.}</li> </ol> </li> <li>Other attributes to show in columns<ol> <li>[multiple selection]  {select distinct the_type from attributes}</li> </ol> </li> <li>date range (optionally):<ol> <li>After [Date1] Before [Date2]</li> </ol> </li> <li>Show only from list (optionally)<ol> <li>List of ids of name of saved list of ids [Text field]</li> </ol> </li> </ol> <p>Output de <code>timelink.pandas.entities_with_attributes</code> DataFrame  Button [Save as]  Format: one of Excel, Csv, JSON (user stand widget for this) Button: [Save ids]  Saves ids with a name, user.</p>"},{"location":"roadmap/web_version/tmp_tables/name_to_table/","title":"Name to table","text":"<p>List of people with a given name.</p> <p>Name: (name)</p>"},{"location":"timelink_and_git/Linking_to_a_source_fragment/","title":"Linking to a source fragment","text":"<p>You can generate a link to a fragment of a source in VSCode, by selecting the lines in the source and right clicking on the selection and choosing the \"Share\" menu item.</p> <p></p> <p>The \"Head Link\" will point to the most recent version of the file. The permalink is the current version. By copying as Markdown you get a fragment that can be pasted in a Markdown text, such as this note:</p> <ul> <li>carta$avulsos01-c2/18/1/1600/Nankin/resumo=Carta de renuncia\u00e7\u00e3o do irm\u00e3o Sebasti\u00e3o Fernandes/obs=BA, 49-V-4, AHM C0070,doc 8, fol. 5v</li> </ul>"},{"location":"tutorial/","title":"Index","text":"<p>First  [[create_a_new_project]]</p>"},{"location":"tutorial/defining_new_source_types/","title":"Defining new source types","text":"<p>One of the aims of <code>timelink</code> is to allow the transcription of information from historical sources in a format close to the original document, in terms of structure and terminology.</p> <p>To make this possible <code>timelink</code> allows for the definition of specific sources.</p> <p>In this section we will see how new source types are defined.</p> <p>First the notation used to define new source types</p> <p>Second how to specify how the information in the new sources is stored  in the database</p>"},{"location":"tutorial/defining_new_source_types/defining_new_database_mappings/","title":"Defining source to database mappings","text":"<p>Once a new source type is defined it must be mapped to existing, or new, database tables.</p> <p>This correspondence between the source and the database is called a mapping.</p>"},{"location":"tutorial/defining_new_source_types/defining_new_database_mappings/#how-timelink-determines-a-mapping","title":"How <code>timelink</code> determines a mapping","text":"<ul> <li>using the inheritance hierarchy</li> </ul>"},{"location":"tutorial/defining_new_source_types/defining_new_database_mappings/#structure-of-mapping-files","title":"Structure of mapping files","text":""},{"location":"tutorial/defining_new_source_types/defining_new_database_mappings/#example","title":"Example","text":""},{"location":"tutorial/defining_new_source_types/defining_new_source_types/","title":"Defining new  historical source types","text":""},{"location":"tutorial/defining_new_source_types/defining_new_source_types/#what-you-need-to-define","title":"What you need to define","text":""},{"location":"tutorial/defining_new_source_types/defining_new_source_types/#structure-of-kleio-schema-files","title":"Structure of <code>kleio</code> schema files","text":""},{"location":"tutorial/defining_new_source_types/defining_new_source_types/#defining-new-sources-by-extending-base-ones","title":"Defining new sources by extending base ones","text":""},{"location":"tutorial/defining_new_source_types/defining_new_source_types/#most-common-components-groups-of-source-files","title":"Most common components (groups) of source files","text":""},{"location":"tutorial/defining_new_source_types/defining_new_source_types/#special-source-types","title":"Special source types","text":"<ul> <li>VIP lists</li> <li>Event lists</li> </ul>"},{"location":"tutorial/defining_new_source_types/querying_user_defined_structures/","title":"Querying user defined structures","text":""},{"location":"tutorial/defining_new_source_types/querying_user_defined_structures/#introspecting-the-database","title":"Introspecting the database","text":""},{"location":"tutorial/defining_new_source_types/querying_user_defined_structures/#building-queries-with-sqlalchemy","title":"Building queries with <code>SQLAlchemy</code>","text":""},{"location":"tutorial/processing_source_transcriptions/add_your_own_files/","title":"Adding yout own files","text":"<ol> <li>Can we use a template for file:<ol> <li>kleio$, source$</li> </ol> </li> <li>Check the existing files</li> </ol>"},{"location":"tutorial/processing_source_transcriptions/checking_translation_results/","title":"Checking translation results","text":""},{"location":"tutorial/processing_source_transcriptions/checking_translation_results/#in-notebooks","title":"In notebooks","text":""},{"location":"tutorial/processing_source_transcriptions/checking_translation_results/#in-the-web","title":"In the web","text":""},{"location":"tutorial/processing_source_transcriptions/checking_translation_results/#with-the-command-line","title":"With the command line","text":""},{"location":"tutorial/processing_source_transcriptions/importing_into_the_database/","title":"Importing into the database","text":""},{"location":"tutorial/processing_source_transcriptions/importing_into_the_database/#triggering-the-import","title":"Triggering the import","text":""},{"location":"tutorial/processing_source_transcriptions/importing_into_the_database/#in-notebooks","title":"In notebooks","text":""},{"location":"tutorial/processing_source_transcriptions/importing_into_the_database/#in-the-web-interface","title":"In the web interface","text":""},{"location":"tutorial/processing_source_transcriptions/importing_into_the_database/#in-the-command-line","title":"In the command line","text":""},{"location":"tutorial/processing_source_transcriptions/importing_into_the_database/#checking-for-errors","title":"Checking for errors","text":""},{"location":"tutorial/processing_source_transcriptions/translating/","title":"Translating source files","text":"<p>Translation is the process that reads a transcription of a historical source in <code>kleio</code> notation and produces that normalized data that will be imported in the database.</p>"},{"location":"tutorial/processing_source_transcriptions/translating/#what-translation-does","title":"What translation does","text":""},{"location":"tutorial/processing_source_transcriptions/translating/#mapping-groups-in-the-source-to-entities-in-the-database","title":"Mapping groups in the source to entities in the database","text":""},{"location":"tutorial/processing_source_transcriptions/translating/#inferences-how-implicit-information-is-produced","title":"Inferences: how implicit information is produced","text":""},{"location":"tutorial/processing_source_transcriptions/translating/#managing-translation","title":"Managing translation","text":"<ol> <li>How to trigger a translation<ol> <li>With VSCode extension, translate on save</li> <li>With notebook class update_from_sources</li> <li>With a python call</li> <li>In the web interface</li> </ol> </li> </ol>"},{"location":"tutorial/setting_up_a_project/add_sample_files/","title":"Add sample files","text":"<ul> <li>Need a way to copy samples from the net. </li> <li>Maybe a notebook for that.</li> </ul>"},{"location":"tutorial/setting_up_a_project/create_a_new_project/","title":"Create a new project","text":"<ul> <li>Go to github use template</li> <li>Clone to your computer (See best way to do it in VSCode)</li> <li>Go to init notebook</li> <li>Follow the VSCode steps<ul> <li>Install python extension</li> <li>Create environment</li> <li>Install requirements</li> </ul> </li> </ul>"},{"location":"tutorial/setting_up_a_project/required_software/","title":"Required software","text":"<p>Check that you have the required software.</p> <p>You need :</p> <ul> <li>Git Desktop</li> <li>VSCode</li> <li>Docker</li> </ul>"},{"location":"tutorial/the_web_interface/","title":"Index","text":"<p>TDB web interface</p>"},{"location":"tutorial/working_with_notebooks/working_with_pandas/","title":"Working with pandas","text":""},{"location":"tutorial/working_with_notebooks/working_with_pandas/#generating-data-frames-for-entities-and-attributes","title":"Generating data frames for entities and attributes","text":"<p>The function <code>entities_with_attribute</code> allows to fetch entities with certain attributes, producing a data frame where entities are rows and attributes are columns. Various parameters allow for limiting attributes with specific types and values, aggregating several attributes in a single column filtering by dates , kleio group name, and list of entity ids. </p>"},{"location":"tutorial/working_with_notebooks/working_with_pandas/#entities_with_attribute","title":"entities_with_attribute","text":""}]}